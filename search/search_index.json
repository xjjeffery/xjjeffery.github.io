{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"\u4e3b\u9875","text":"<p>\u200b\u672c\u200b\u7f51\u7ad9\u200b\u4e3a\u200b xjjeffery \u200b\u4e2a\u4eba\u200b\u5b66\u4e60\u200b\u5de5\u4f5c\u200b\u7684\u200b\u603b\u7ed3\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u5b66\u4e60\u200b\u548c\u200b\u5de5\u4f5c\u200b\u4e2d\u200b\u9047\u5230\u200b\u7684\u200b\u5404\u79cd\u200b\u95ee\u9898\u200b\u548c\u200b\u76f8\u5173\u200b\u6280\u672f\u200b\u7684\u200b\u7814\u7a76\u200b\uff0c\u200b\u6b22\u8fce\u200b\u5927\u5bb6\u200b\u9605\u8bfb\u200b\u5b66\u4e60\u200b\u5e76\u200b\u4ea4\u6d41\u200b\u3002</p>"},{"location":"0voice/2404_cpp/network/network_io_multi_plexing.html","title":"\u7f51\u7edc\u200b I/O \u200b\u4e4b\u200b\u591a\u8def\u590d\u7528","text":""},{"location":"0voice/2404_cpp/network/network_io_multi_plexing.html#select","title":"<code>select</code>","text":"<p>\u200b\u5728\u200b\u524d\u200b\u4e00\u7bc7\u200b\u4e2d\u200b\u63d0\u5230\u200b\u4e00\u200b\u8bf7\u6c42\u200b\u4e00\u7ebf\u200b\u7a0b\u6709\u200b\u4e24\u4e2a\u200b\u7f3a\u70b9\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u7f3a\u70b9\u200b\u5bfc\u81f4\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u200b\u5b9e\u73b0\u200b\u767e\u4e07\u200b\u7ea7\u200b\u5e76\u53d1\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u3002\u200b\u90a3\u4e48\u200b\u6709\u6ca1\u6709\u200b\u53ea\u7528\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u5c31\u200b\u80fd\u200b\u5b9e\u73b0\u200b\u5904\u7406\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u65b9\u6848\u200b \u2014\u2014 I/O \u200b\u591a\u8def\u590d\u7528\u200b\uff0c\u200b\u8fd9\u662f\u200b\u5185\u6838\u200b\u63d0\u4f9b\u200b\u7528\u6237\u200b\u6001\u200b\u7684\u200b\u591a\u8def\u590d\u7528\u200b\u7cfb\u7edf\u200b\u8c03\u7528\u200b\uff0c\u200b\u8fdb\u7a0b\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u7cfb\u7edf\u200b\u55f2\u7528\u200b\u51fd\u6570\u200b\u4ece\u200b\u5185\u6838\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u591a\u4e2a\u200b\u4e8b\u4ef6\u200b\u3002</p> <p>\u200b\u5148\u770b\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>select</code> \u200b\u5b9e\u73b0\u200b\u7684\u200b\u670d\u52a1\u5668\u7aef\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/select.h&gt;\n#include &lt;sys/time.h&gt;\n\nint main() {\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(9090);\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind() error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  if (-1 == listen(servfd, 10)) {\n    perror(\"listen() error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  fd_set rsets, tmpsets;\n  FD_ZERO(&amp;rsets);\n  FD_SET(servfd, &amp;rsets);\n  int maxfd = servfd;\n\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  socklen_t addr_len = sizeof(clnt_addr);\n  while (1) {\n    tmpsets = rsets;\n    struct timeval timeout;\n    timeout.tv_sec = 5;\n    timeout.tv_usec = 0;\n    int ret = select(maxfd+1, &amp;tmpsets, NULL, NULL, &amp;timeout);\n    if (-1 == ret) {\n      perror(\"select() error\");\n      break;\n    } else if (0 == ret) {\n      printf(\"No data\");\n      continue;\n    }\n\n    for (int i = 0; i &lt; maxfd+1; ++i) {\n      if (FD_ISSET(i, &amp;tmpsets)) {\n        if (i == servfd) {\n          int clntfd = accept(servfd, (struct sockaddr *)&amp;clnt_addr, &amp;addr_len);\n          if (-1 == clntfd) {\n            perror(\"accept() error\");\n            break;\n          } else {\n            printf(\"client connect: %d\\n\", clntfd);\n          }\n\n          FD_SET(clntfd, &amp;rsets);\n          if (clntfd &gt; maxfd)\n            maxfd = clntfd;\n        } else {\n          char message[1024] = {0};\n          int count = recv(i, message, 1024, 0);\n          if (0 == count) {\n            printf(\"client disconnect: %d\\n\", i);\n            close(i);\n            FD_CLR(i, &amp;rsets);\n            continue;\n          }\n\n          printf(\"RECV: %s\\n\", message);\n          count = send(i, message, count, 0);\n          printf(\"Count: %d\\n\", count);\n        }\n      }\n    }\n  }\n\n  close(servfd);\n\n  return 0;\n}\n</code></pre> <p><code>select</code> \u200b\u7684\u200b\u6574\u4e2a\u200b\u5904\u7406\u8fc7\u7a0b\u200b\u5982\u4e0b\u200b</p> <pre><code>sequenceDiagram\n    participant A as \u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\n    participant B as \u200b\u5185\u6838\u200b\u7a7a\u95f4\u200b\n    A -&gt;&gt; A: FD_ZERO\n    A -&gt;&gt;A: FD_SET \n    A -&gt;&gt; +B: \u200b\u8c03\u7528\u200bselect()\u200b\u51fd\u6570\u200b\n    Note left of A: \u200b\u8fdb\u7a0b\u200b\u8fdb\u5165\u200b\u963b\u585e\u72b6\u6001\u200b\uff0c&lt;br/&gt;\u200b\u53ef\u80fd\u200b\u7b49\u5230\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b&lt;br/&gt; socket \u200b\u63cf\u8ff0\u200b\u5c31\u7eea\u200b\n    loop \u200b\u904d\u5386\u200b\u4e00\u904d\u200b fd\n        B --&gt;&gt; B: \u200b\u68c0\u67e5\u200b\u7f51\u7edc\u200b\u4e8b\u4ef6\u200b\n    end\n    Note right of B: \u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u6ee1\u8db3\u6761\u4ef6\u200b\u7684\u200b fd\uff0c&lt;br/&gt;\u200b\u5c06\u200b\u8fdb\u884c\u200b\u4f11\u7720\u200b\uff0c\u200b\u5728\u200b socket &lt;br/&gt;\u200b\u53ef\u8bfb\u200b\u53ef\u200b\u5199\u200b\u65f6\u200b\u5524\u9192\u200b\uff0c&lt;br/&gt;\u200b\u6216\u8005\u200b\u5728\u200b\u8d85\u65f6\u200b\u540e\u200b\u5524\u9192\u200b\n    B --&gt;&gt; -A: \u200b\u8fd4\u56de\u200b\n    Note left of A: \u200b\u5f53\u200b select() \u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u540e\u200b\uff0c&lt;br/&gt;\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u904d\u5386\u200b fd_set\uff0c&lt;br/&gt;\u200b\u6765\u200b\u627e\u5230\u200b\u5c31\u7eea\u200b\u7684\u200b\u63cf\u8ff0\u7b26\u200b\uff0c&lt;br/&gt;\u200b\u5728\u200b\u64cd\u4f5c\u200b socket\n    A -&gt;&gt; +B: \u200b\u8c03\u7528\u200b `read()`/`recvfrom()` \u200b\u7b49\u200b\u51fd\u6570\u200b\n    Note right of B: \u200b\u5c06\u200b\u6570\u636e\u200b\u4ece\u200b\u5185\u6838\u200b\u7a7a\u95f4\u200b&lt;br/&gt;\u200b\u62f7\u8d1d\u5230\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\n    B --&gt;&gt; -A: \u200b\u8fd4\u56de\u200b\u8bfb\u53d6\u200b\u5230\u200b\u7684\u200b\u6570\u636e\u200b</code></pre> <ol> <li>\u200b\u5c06\u200b\u5df2\u200b\u8fde\u63a5\u200b\u7684\u200b <code>socket</code> \u200b\u90fd\u200b\u653e\u5728\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u96c6\u5408\u200b\u4e2d\u200b\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200b <code>select</code> \u200b\u51fd\u6570\u200b\u5c06\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u96c6\u5408\u200b\u62f7\u8d1d\u5230\u200b\u5185\u6838\u200b\u4e2d\u200b</li> <li>\u200b\u5728\u200b\u5185\u6838\u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u6709\u200b\u7f51\u7edc\u200b\u4e8b\u4ef6\u200b\u53d1\u751f\u200b\uff0c\u200b\u68c0\u67e5\u200b\u662f\u200b\u901a\u8fc7\u200b\u6700\u200b\u7b80\u5355\u200b\u66b4\u529b\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u904d\u5386\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u96c6\u5408\u200b\uff0c\u200b\u4e00\u65e6\u200b\u6709\u200b\u7f51\u7edc\u200b\u4e8b\u4ef6\u200b\u53d1\u751f\u200b\uff0c\u200b\u5c31\u200b\u5c06\u200b socket \u200b\u5bf9\u5e94\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u53ef\u8bfb\u200b\u6216\u200b\u53ef\u200b\u5199\u200b\uff0c\u200b\u5c06\u200b\u96c6\u5408\u200b\u62f7\u8d1d\u200b\u4f1a\u200b\u7528\u6237\u200b\u6001\u200b\uff1b\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u7f51\u7edc\u200b\u4e8b\u4ef6\u200b\u53d1\u751f\u200b\u5219\u200b\u4f11\u7720\u200b\u7b49\u5f85\u200b</li> <li><code>select</code> \u200b\u8fd4\u56de\u200b\u7f51\u7edc\u200b\u4e8b\u4ef6\u200b\u4e2d\u200b\u5c31\u7eea\u200b\u7684\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u6570\u76ee\u200b\uff0c\u200b\u51fa\u9519\u200b\u8fd4\u56de\u200b -1\uff0c\u200b\u6709\u200b\u4e8b\u4ef6\u200b\u53d1\u751f\u200b\u8fd4\u56de\u200b\u6b63\u6570\u200b\uff0c\u200b\u5426\u5219\u200b\u8fd4\u56de\u200b 0</li> <li>\u200b\u5728\u200b\u7528\u6237\u200b\u6001\u200b\u904d\u5386\u200b\u6574\u4e2a\u200b\u96c6\u5408\u200b\u627e\u200b\u6253\u200b\u53ef\u8bfb\u200b\u6216\u200b\u53ef\u200b\u5199\u200b\u7684\u200b socket\uff0c\u200b\u7136\u540e\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b</li> </ol> <p>Note</p> <p>\u200b\u56e0\u4e3a\u200b\u9700\u8981\u200b\u5c06\u200b\u96c6\u5408\u200b\u62f7\u8d1d\u5230\u200b\u5185\u6838\u200b\u4e2d\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u68c0\u67e5\u200b\u7f51\u7edc\u200b\u4e8b\u4ef6\u200b\u4fee\u6539\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u6b64\u65f6\u200b\u5728\u200b\u5c06\u200b\u96c6\u5408\u200b\u62f7\u8d1d\u5230\u200b\u7528\u6237\u200b\u6001\u4e2d\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4e3a\u4e86\u200b\u8bb0\u5f55\u200b\u6700\u200b\u5f00\u59cb\u200b\u7684\u200b\u96c6\u5408\u200b\uff0c\u200b\u5728\u200b\u62f7\u8d1d\u5230\u200b\u5185\u6838\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5148\u200b\u5907\u4efd\u200b\u4e00\u4e2a\u200b\u96c6\u5408\u200b\uff0c\u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u7a0b\u5e8f\u200b\u4e2d\u4f1a\u200b\u6709\u200b\u4e24\u4e2a\u200b\u96c6\u5408\u200b\u7684\u200b\u539f\u56e0\u200b\u3002</p> <p><code>select</code> \u200b\u7684\u200b\u4f18\u7f3a\u70b9\u200b:</p> <ul> <li>\u200b\u4f18\u70b9\u200b\uff1a\u200b\u51e0\u4e4e\u200b\u5728\u200b\u6240\u6709\u200b\u7684\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u652f\u6301\u200b\uff0c\u200b\u5177\u6709\u200b\u826f\u597d\u200b\u7684\u200b\u79fb\u690d\u6027\u200b</li> <li>\u200b\u7f3a\u70b9\u200b\uff1a<ul> <li>\u200b\u5355\u4e2a\u200b\u8fdb\u7a0b\u200b\u80fd\u591f\u200b\u76d1\u89c6\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u6570\u91cf\u200b\u5b58\u5728\u200b\u6700\u5927\u200b\u9650\u5236\u200b\uff0c\u200b\u5728\u200b Linux \u200b\u4e0a\u200b\u4e00\u822c\u200b\u4e3a\u200b 1024\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u751a\u81f3\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u5185\u6838\u200b\u7684\u200b\u65b9\u5f0f\u200b\u63d0\u5347\u200b\u8fd9\u4e00\u200b\u9650\u5236\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u6837\u200b\u4e5f\u200b\u4f1a\u200b\u9020\u6210\u200b\u6548\u7387\u200b\u7684\u200b\u964d\u4f4e\u200b</li> <li>\u200b\u9700\u8981\u200b\u7ef4\u62a4\u200b\u4e00\u4e2a\u200b\u7528\u6765\u200b\u5b58\u653e\u200b\u5927\u91cf\u200b fd \u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c\u200b\u8fd9\u6837\u200b\u4f1a\u200b\u4f7f\u5f97\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u548c\u200b\u5185\u6838\u200b\u7a7a\u95f4\u200b\u5728\u200b\u4f20\u9012\u200b\u8be5\u200b\u7ed3\u6784\u200b\u65f6\u200b\u590d\u5236\u200b\u5f00\u9500\u200b\u5927\u200b</li> <li>\u200b\u6bcf\u6b21\u200b\u5728\u200b\u6709\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u6d3b\u8dc3\u200b\u65f6\u200b\uff0c\u200b\u90fd\u200b\u9700\u8981\u200b\u904d\u5386\u200b\u4e00\u904d\u200b\u6240\u6709\u200b\u7684\u200b fd \u200b\u627e\u5230\u200b\u8be5\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u8fd9\u4f1a\u200b\u5e26\u6765\u200b\u5927\u91cf\u200b\u7684\u200b\u65f6\u95f4\u200b\u6d88\u8017\u200b</li> </ul> </li> </ul>"},{"location":"0voice/2404_cpp/network/network_io_multi_plexing.html#poll","title":"<code>poll</code>","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200b <code>selcet</code> \u200b\u65f6\u200b\u9700\u8981\u200b\u4f20\u5165\u200b\u5f88\u591a\u200b\u53c2\u6570\u200b\uff0c\u200b\u8fd9\u200b\u5728\u200b\u7f16\u5199\u7a0b\u5e8f\u200b\u7684\u200b\u65f6\u5019\u200b\u4f1a\u200b\u89c9\u5f97\u200b\u9ebb\u70e6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6709\u200b\u4e86\u200b\u53e6\u200b\u4e00\u79cd\u200b\u8f83\u200b\u5c11\u200b\u53c2\u6570\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>poll</code>\u3002<code>poll</code> \u200b\u7684\u200b\u5b9e\u73b0\u200b\u548c\u200b <code>select</code> \u200b\u975e\u5e38\u200b\u76f8\u4f3c\u200b\uff0c\u200b\u53ea\u662f\u200b\u63cf\u8ff0\u200b fd \u200b\u96c6\u5408\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4e0d\u540c\u200b\uff0c<code>poll</code> \u200b\u4f7f\u7528\u200b <code>pollfd</code> \u200b\u7ed3\u6784\u200b\u800c\u200b\u4e0d\u662f\u200b <code>select</code> \u200b\u7684\u200b <code>fd_set</code> \u200b\u7ed3\u6784\u200b\u3002<code>poll</code> \u200b\u4e0d\u200b\u9650\u5236\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u4e2a\u6570\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u4f7f\u7528\u200b\u94fe\u8868\u200b\u7ef4\u62a4\u200b\u8fd9\u4e9b\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u5176\u4ed6\u200b\u7684\u200b\u4e0e\u200b <code>select</code> \u200b\u57fa\u672c\u200b\u5dee\u4e0d\u591a\u200b\u3002</p> <p><code>poll</code> \u200b\u548c\u200b <code>select</code> \u200b\u540c\u6837\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u7f3a\u70b9\u200b\u5c31\u662f\u200b\uff0c\u200b\u5305\u542b\u200b\u5927\u91cf\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u6570\u7ec4\u200b\u88ab\u200b\u6574\u4f53\u200b\u590d\u5236\u200b\u4e8e\u200b\u7528\u6237\u200b\u6001\u200b\u548c\u200b\u5185\u6838\u200b\u7684\u200b\u5730\u5740\u200b\u7a7a\u95f4\u200b\u4e4b\u95f4\u200b\uff0c\u200b\u800c\u200b\u4e0d\u8bba\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u662f\u5426\u200b\u5c31\u7eea\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u5f00\u9500\u200b\u968f\u7740\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u6570\u91cf\u200b\u7684\u200b\u589e\u52a0\u200b\u800c\u200b\u7ebf\u6027\u200b\u589e\u5927\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b <code>poll</code> \u200b\u5b9e\u73b0\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;poll.h&gt;\n\nint main() {\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(9090);\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind() error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  if (-1 == listen(servfd, 10)) {\n    perror(\"listen() error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // \u200b\u521b\u5efa\u200b pollfd \u200b\u7ed3\u6784\u200b\u6570\u7ec4\u200b\n  struct pollfd fds[1024] = {0};\n  fds[servfd].fd = servfd;\n  fds[servfd].events = POLLIN;\n  int maxfd = servfd;\n\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  socklen_t addr_len = sizeof(clnt_addr);\n  while (1) {\n    int ret = poll(fds, 1024, -1);\n    if (-1 == ret) {\n      perror(\"select() error\");\n      break;\n    } else if (0 == ret) {\n      printf(\"No data\");\n      continue;\n    }\n\n    for (int i = 0; i &lt; maxfd+1; ++i) {\n      if (fds[i].revents &amp; POLLIN) {\n        if (i == servfd) {\n          int clntfd = accept(servfd, (struct sockaddr *)&amp;clnt_addr, &amp;addr_len);\n          if (-1 == clntfd) {\n            perror(\"accept() error\");\n            break;\n          } else {\n            printf(\"client connect: %d\\n\", clntfd);\n          }\n\n          fds[clntfd].fd = clntfd;\n          fds[clntfd].events = POLLIN;\n          if (clntfd &gt; maxfd)\n            maxfd = clntfd;\n        } else {\n          char message[1024] = {0};\n          int count = recv(i, message, 1024, 0);\n          if (0 == count) {\n            printf(\"client disconnect: %d\\n\", i);\n            close(i);\n            fds[i].fd = -1;\n            fds[i].events = 0;\n            continue;\n          }\n\n          printf(\"RECV: %s\\n\", message);\n          count = send(i, message, count, 0);\n          printf(\"Count: %d\\n\", count);\n        }\n      }\n    }\n  }\n\n  close(servfd);\n\n  return 0;\n}\n</code></pre> <p>Note</p> <p>\u200b\u867d\u7136\u200b <code>poll</code> \u200b\u4e0e\u200b <code>select</code> \u200b\u4e00\u6837\u200b\uff0c\u200b\u4f1a\u200b\u5728\u200b\u5185\u6838\u200b\u7a7a\u95f4\u200b\u548c\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u4e4b\u95f4\u200b\u62f7\u8d1d\u200b\u4e24\u6b21\u200b\uff0c\u200b\u4f46\u662f\u200b <code>poll</code> \u200b\u4f7f\u7528\u200b\u7684\u200b <code>pollfd</code> \u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c\u200b\u8be5\u200b\u7ed3\u6784\u200b\u5f62\u5f0f\u200b\u5982\u4e0b\u200b</p> <pre><code>struct pollfd {\n  int   fd;         /* file descriptor */\n  short events;     /* requested events */\n  short revents;    /* returned events */\n};\n</code></pre> <p>\u200b\u6b64\u200b\u7ed3\u6784\u200b\u4e0d\u50cf\u200b <code>fd_set</code> \u200b\u7ed3\u6784\u200b\u53ea\u662f\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u6bd4\u7279\u200b\u4f4d\u6765\u200b\u8bb0\u5f55\u200b\u7f51\u7edc\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u53d1\u751f\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u200b\u5176\u200b\u5c31\u7eea\u200b\u3002\u200b\u800c\u662f\u200b\u6709\u200b\u6307\u5b9a\u200b\u7684\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u5904\u7406\u200b\u8bf7\u6c42\u200b\u4e8b\u4ef6\u200b\u548c\u200b\u54cd\u5e94\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u4e0d\u200b\u9700\u8981\u200b\u5bf9\u6b64\u200b\u7ed3\u6784\u200b\u8fdb\u884c\u200b\u518d\u6b21\u200b\u590d\u5236\u200b\u3002</p>"},{"location":"0voice/2404_cpp/network/network_io_multi_plexing.html#epoll","title":"<code>epoll</code>","text":"<p><code>epoll</code> \u200b\u662f\u200b\u5728\u200b Linux 2.5.44 \u200b\u4e4b\u540e\u200b\u5f15\u5165\u200b\u7684\u200b\uff0c\u200b\u76f8\u6bd4\u200b <code>select</code> \u200b\u548c\u200b <code>poll</code> \u200b\u66f4\u52a0\u200b\u7684\u200b\u7075\u6d3b\u200b\uff0c\u200b\u4f46\u662f\u200b\u5176\u200b\u6838\u5fc3\u200b\u7684\u200b\u539f\u7406\u200b\u90fd\u200b\u662f\u200b\u5f53\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u5c31\u7eea\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u901a\u77e5\u200b\u5e94\u7528\u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u544a\u8bc9\u200b\u5b83\u200b\u54ea\u4e2a\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u5c31\u7eea\u200b\uff0c\u200b\u53ea\u662f\u200b\u901a\u77e5\u200b\u5904\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4e0d\u540c\u200b\u800c\u5df2\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b <code>epoll</code> \u200b\u5b9e\u73b0\u200b tcp \u200b\u670d\u52a1\u5668\u7aef\u200b\u7684\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/epoll.h&gt;\n\nint main() {\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(9090);\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind() error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  if (-1 == listen(servfd, 10)) {\n    perror(\"listen() error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  int epfd = epoll_create(1);\n  if (-1 == epfd) {\n    perror(\"epoll create error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  struct epoll_event ev;\n  ev.events = EPOLLIN;\n  ev.data.fd = servfd;\n  epoll_ctl(epfd, EPOLL_CTL_ADD, servfd, &amp;ev);\n\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  socklen_t addr_len = sizeof(clnt_addr);\n  while (1) {\n    struct epoll_event events[1024] = {0};\n    int ret = epoll_wait(epfd, events, 1024, -1);\n    if (-1 == ret) {\n      perror(\"select() error\");\n      break;\n    }\n\n    for (int i = 0; i &lt; ret; ++i) {\n      if (events[i].events &amp; EPOLLIN) {\n        int curfd = events[i].data.fd;\n        if (curfd == servfd) {\n          int clntfd = accept(servfd, (struct sockaddr *)&amp;clnt_addr, &amp;addr_len);\n          if (-1 == clntfd) {\n            perror(\"accept() error\");\n            break;\n          } else {\n            printf(\"client connect: %d\\n\", clntfd);\n          }\n\n          ev.events = EPOLLIN;\n          ev.data.fd = clntfd;\n          epoll_ctl(epfd, EPOLL_CTL_ADD, clntfd, &amp;ev);\n        } else {\n          char message[1024] = {0};\n          int count = recv(curfd, message, 1024, 0);\n          if (0 == count) {\n            printf(\"client disconnect: %d\\n\", curfd);\n            close(curfd);\n            epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, NULL);\n            continue;\n          }\n\n          printf(\"RECV: %s\\n\", message);\n          count = send(curfd, message, count, 0);\n          printf(\"Count: %d\\n\", count);\n        }\n      }\n    }\n  }\n\n  close(servfd);\n\n  return 0;\n}\n</code></pre> <p><code>epoll</code> \u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u4e3b\u8981\u200b\u5b9e\u73b0\u200b\u6b65\u9aa4\u200b\uff1a</p> <ul> <li>\u200b\u4f7f\u7528\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u7ba1\u7406\u200b\u591a\u4e2a\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\uff0c<code>epoll</code> \u200b\u4e0d\u200b\u9650\u5236\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u4e2a\u6570\u200b\uff0c\u200b\u901a\u8fc7\u200b <code>epoll_create</code> \u200b\u51fd\u6570\u200b\u521b\u5efa\u200b\u4fdd\u5b58\u200b <code>epoll</code> \u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u6b64\u200b\u51fd\u6570\u200b\u7684\u200b\u53c2\u6570\u200b\u53ea\u8981\u200b\u4e0d\u200b\u7b49\u4e8e\u200b 0 \u200b\u7684\u200b\u6548\u679c\u200b\u90fd\u200b\u662f\u200b\u76f8\u540c\u200b\u7684\u200b(\u200b\u8fd9\u4e2a\u200b\u53c2\u6570\u200b\u662f\u200b\u4e3a\u4e86\u200b\u65e7\u7248\u672c\u200b)</li> <li>\u200b\u5c06\u200b\u6587\u4ef6\u200b socket \u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u4e0e\u200b\u4e8b\u4ef6\u200b\u7ed1\u5b9a\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>epoll_event</code> \u200b\u7ed3\u6784\u200b\u4f53\u200b</li> <li>\u200b\u5c06\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u7684\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u5b58\u653e\u200b\u5230\u200b\u5185\u6838\u200b\u7684\u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u8868\u4e2d\u200b\uff0c\u200b\u8fd9\u6837\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u548c\u200b\u5185\u6838\u200b\u7a7a\u95f4\u200b\u7684\u200b\u62f7\u8d1d\u200b\u53ea\u200b\u9700\u200b\u4e00\u6b21\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u901a\u8fc7\u200b <code>epoll_ctl</code> \u200b\u51fd\u6570\u200b\u5411\u200b\u7a7a\u95f4\u200b\u6ce8\u518c\u200b\u5e76\u200b\u6ce8\u9500\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u6dfb\u52a0\u200b\u3001\u200b\u5220\u9664\u200b\u548c\u200b\u4fee\u6539\u200b\u3002</li> <li>\u200b\u7b49\u5f85\u200b\u7f51\u7edc\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u53d1\u751f\u200b\uff0c\u200b\u8fd4\u56de\u200b\u4e8b\u4ef6\u200b\u53d1\u751f\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u6570\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u662f\u200b\u901a\u8fc7\u200b <code>epoll_wait</code> \u200b\u51fd\u6570\u8c03\u7528\u200b\u6765\u200b\u7b49\u5f85\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u53d8\u5316\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u54cd\u5e94\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6709\u200b\u5f88\u591a\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8be5\u200b\u51fd\u6570\u200b\u7684\u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b\u7684\u200b\u53d8\u91cf\u200b\u672c\u8d28\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5927\u5c0f\u200b\u662f\u200b\u52a8\u6001\u5206\u914d\u200b\u7684\u200b</li> </ul> <p>\u200b\u4e0a\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u5b9e\u73b0\u200b\u6b65\u9aa4\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u53ef\u80fd\u200b\u8fd8\u662f\u200b\u65e0\u6cd5\u200b\u7406\u89e3\u200b\u5177\u4f53\u200b\u542b\u4e49\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e0b\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u8fdb\u4e00\u6b65\u200b\u6df1\u5165\u200b\u7406\u89e3\u200b <code>epoll</code> \u200b\u5230\u5e95\u200b\u662f\u200b\u4ec0\u4e48\u200b\u4e1c\u4e1c\u200b\uff1f</p> <p>\u200b\u4ee5\u200b\u5feb\u9012\u200b\u5458\u200b\u914d\u9001\u200b\u5feb\u9012\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u5728\u200b\u6700\u65e9\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5feb\u9012\u200b\u5458\u200b\u9700\u8981\u200b\u5230\u200b\u6328\u5bb6\u6328\u6237\u200b\u7684\u200b\u8be2\u95ee\u200b\u662f\u5426\u200b\u5bc4\u6536\u200b\u5feb\u9012\u200b\uff0c\u200b\u6709\u200b\u8fd9\u4e2a\u200b\u9700\u6c42\u200b\u5c31\u200b\u767b\u8bb0\u200b\u62ff\u8d70\u200b\u5feb\u9012\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b <code>select</code>\u3002\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u5728\u200b\u5c0f\u533a\u200b\u91cc\u200b\u642d\u5efa\u200b\u4e86\u200b\u8702\u5de2\u200b\u7684\u200b\u67dc\u5b50\u200b\uff0c\u200b\u5feb\u9012\u200b\u5458\u200b\u53ea\u200b\u9700\u200b\u6309\u65f6\u200b\u5230\u200b\u8fd9\u4e2a\u200b\u8702\u5de2\u200b\u4e2d\u653e\u200b\u5feb\u9012\u200b\u548c\u200b\u62ff\u200b\u5feb\u9012\u200b\u5c31\u884c\u200b\u3002\u200b\u5728\u200b <code>epoll</code> \u200b\u7684\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\uff0c<code>epoll_create</code> \u200b\u5c31\u200b\u76f8\u5f53\u4e8e\u200b\u8058\u8bf7\u200b\u5feb\u9012\u200b\u5458\u200b\u3001\u200b\u642d\u5efa\u200b\u8702\u5de2\u200b\u4ee5\u53ca\u200b\u5efa\u7acb\u200b\u8fd9\u79cd\u200b\u5de5\u4f5c\u200b\u673a\u5236\u200b\uff1b<code>epoll_event</code> \u200b\u4e8b\u4ef6\u200b\u5c31\u200b\u76f8\u5f53\u4e8e\u200b\u5c0f\u533a\u200b\u5c45\u6c11\u200b\uff1b<code>epoll_ctl</code> \u200b\u76f8\u5f53\u4e8e\u200b\u5c0f\u533a\u200b\u5c45\u6c11\u200b\u5165\u4f4f\u200b\u3001\u200b\u642c\u8d70\u200b\u3001\u200b\u6362\u200b\u5730\u65b9\u200b\uff1b<code>epoll_wait</code> \u200b\u5feb\u9012\u200b\u5458\u200b\u591a\u957f\u65f6\u95f4\u200b\u53bb\u200b\u8702\u5de2\u200b\u5de5\u4f5c\u200b\u4e00\u6b21\u200b\uff0c<code>events</code> \u200b\u53c2\u6570\u200b\u662f\u200b\u5feb\u9012\u200b\u5458\u200b\u7684\u200b\u88c5\u8d27\u200b\u5c0f\u8f66\u200b\uff0c<code>maxevents</code> \u200b\u662f\u200b\u8fd9\u4e2a\u200b\u5c0f\u8f66\u200b\u7684\u200b\u6700\u5927\u200b\u5bb9\u91cf\u200b\u3002</p> <p><code>epoll</code> \u200b\u4e3a\u4ec0\u4e48\u200b\u9ad8\u6548\u200b\uff1a</p> <ul> <li>\u200b\u5f53\u200b\u6211\u4eec\u200b\u8c03\u7528\u200b <code>epoll_wait()</code> \u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u7684\u200b\u4e0d\u662f\u200b\u5b9e\u9645\u200b\u7684\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u800c\u662f\u200b\u4e00\u4e2a\u200b\u4ee3\u8868\u200b\u5c31\u7eea\u200b\u63cf\u8ff0\u7b26\u200b\u6570\u91cf\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65f6\u5019\u200b\u9700\u8981\u200b\u53bb\u200b <code>epoll</code> \u200b\u6307\u5b9a\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u4f9d\u6b21\u200b\u53d6\u5f97\u200b\u76f8\u5e94\u200b\u6570\u91cf\u200b\u7684\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u5373\u53ef\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u904d\u5386\u200b\u626b\u63cf\u200b\u6240\u6709\u200b\u7684\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b</li> <li>\u200b\u672c\u8d28\u200b\u7684\u200b\u6539\u8fdb\u200b\u5728\u4e8e\u200b <code>epoll</code> \u200b\u91c7\u7528\u200b\u57fa\u4e8e\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5c31\u7eea\u200b\u901a\u77e5\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5728\u200b <code>select/poll</code> \u200b\u4e2d\u200b\uff0c\u200b\u8fdb\u7a0b\u200b\u53ea\u6709\u200b\u5728\u200b\u8c03\u7528\u200b\u4e00\u5b9a\u200b\u7684\u200b\u65b9\u6cd5\u200b\u540e\u200b\uff0c\u200b\u5185\u6838\u200b\u624d\u200b\u5bf9\u200b\u6240\u6709\u200b\u76d1\u89c6\u200b\u7684\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u8fdb\u884c\u200b\u626b\u63cf\u200b\uff0c\u200b\u800c\u200b <code>epoll</code> \u200b\u5b9e\u73b0\u200b\u901a\u8fc7\u200b <code>epoll_ctl()</code> \u200b\u6765\u200b\u6ce8\u518c\u200b\u4e00\u4e2a\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u3002\u200b\u4e00\u65e6\u200b\u68c0\u6d4b\u200b\u5230\u200b <code>epoll</code> \u200b\u7ba1\u7406\u200b\u7684\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u5c31\u7eea\u200b\u65f6\u200b\uff0c\u200b\u5185\u6838\u200b\u4f1a\u200b\u91c7\u7528\u200b\u7c7b\u4f3c\u200b <code>callback</code> \u200b\u7684\u200b\u56de\u8c03\u200b\u673a\u5236\u200b\uff0c\u200b\u8fc5\u901f\u200b\u6fc0\u6d3b\u200b\u8fd9\u4e2a\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u5f53\u200b\u8fdb\u7a0b\u200b\u8c03\u7528\u200b <code>epoll_wait()</code> \u200b\u65f6\u200b\u4fbf\u200b\u53ef\u4ee5\u200b\u5f97\u5230\u200b\u901a\u77e5\u200b\u3002\u200b\u4e5f\u5c31\u662f\u8bf4\u200b <code>epoll</code> \u200b\u6700\u5927\u200b\u7684\u200b\u4f18\u70b9\u200b\u5c31\u200b\u5728\u4e8e\u200b\u5b83\u200b \u200b\u53ea\u7ba1\u200b\u5c31\u7eea\u200b\u7684\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u800c\u200b\u8ddf\u200b socket \u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u603b\u6570\u200b\u65e0\u5173\u200b</li> </ul>"},{"location":"0voice/2404_cpp/network/network_io_server.html","title":"\u7f51\u7edc\u200b I/O \u200b\u4e4b\u200b\u670d\u52a1\u5668\u7aef","text":"<p>\u200b\u7f51\u7edc\u200b\u662f\u200b\u540e\u200b\u7aef\u200b\u5f00\u53d1\u200b\u7684\u200b\u91cd\u8981\u73af\u8282\u200b\uff0c\u200b\u5404\u79cd\u200b\u4f7f\u7528\u200b\u573a\u666f\u200b\u7684\u200b\u5e95\u5c42\u200b\u7f51\u7edc\u200b\u662f\u200b\u600e\u4e48\u200b\u505a\u200b\u7684\u200b\uff0c\u200b\u5982\u200b\uff1a</p> <ul> <li>\u200b\u5fae\u4fe1\u200b\u804a\u5929\u200b\u65f6\u200b\uff0c\u200b\u8bed\u97f3\u200b\u3001\u200b\u6587\u5b57\u200b\u3001\u200b\u89c6\u9891\u200b\u7b49\u200b\u53d1\u9001\u200b\u4e0e\u200b\u7f51\u7edc\u200b I/O \u200b\u6709\u200b\u4ec0\u4e48\u200b\u5173\u7cfb\u200b</li> <li>\u200b\u5237\u200b\u77ed\u200b\u89c6\u9891\u200b\u65f6\u200b\uff0c\u200b\u89c6\u9891\u200b\u662f\u200b\u5982\u4f55\u200b\u5448\u73b0\u200b\u5728\u200b\u4f60\u200b\u7684\u200b app \u200b\u4e0a\u200b\u7684\u200b</li> <li>github/gitlab, git clone\uff0c \u200b\u4e3a\u4ec0\u4e48\u200b\u80fd\u591f\u200b\u5230\u8fbe\u200b\u672c\u5730\u200b</li> <li>\u200b\u4f7f\u7528\u200b\u5171\u4eab\u200b\u8bbe\u5907\u200b\u65f6\u200b\uff0c\u200b\u626b\u63cf\u200b\u4ee5\u540e\u200b\uff0c\u200b\u8bbe\u5907\u200b\u662f\u200b\u5982\u4f55\u200b\u5f00\u9501\u200b\u7684\u200b</li> <li>\u200b\u5bb6\u91cc\u200b\u7684\u200b\u7535\u5b50\u8bbe\u5907\u200b\u662f\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200b\u624b\u673a\u200b app \u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b</li> <li>...</li> </ul> <p>\u200b\u4e0a\u8ff0\u200b\u7684\u200b\u573a\u666f\u200b\u90fd\u200b\u662f\u200b\u7528\u200b\u7f51\u7edc\u200b\u89e3\u51b3\u95ee\u9898\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u573a\u666f\u200b\u4e00\u822c\u200b\u90fd\u200b\u4f1a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u670d\u52a1\u5668\u7aef\u200b\uff0c\u200b\u7136\u540e\u200b\u6709\u200b\u5ba2\u6237\u7aef\u200b\u53bb\u200b\u8fde\u63a5\u200b\u8fdb\u884c\u200b\u7f51\u7edc\u901a\u4fe1\u200b\u3002\u200b\u670d\u52a1\u5668\u7aef\u200b\u548c\u200b\u5ba2\u6237\u7aef\u200b\u4e4b\u95f4\u200b\u4f1a\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8fde\u63a5\u200b\u76f8\u5f53\u4e8e\u200b\u6c34\u7ba1\u200b\uff0c\u200b\u7528\u6765\u200b\u7ba1\u7406\u200b\u4e24\u4e2a\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u901a\u4fe1\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u8fde\u63a5\u200b\u6e20\u9053\u200b\u53d1\u9001\u200b\u4ec0\u4e48\u200b\u5185\u5bb9\u200b\u4e0d\u662f\u200b\u6211\u4eec\u200b\u5173\u6ce8\u200b\u7684\u200b\uff0c\u200b\u6211\u200b\u5173\u6ce8\u200b\u7684\u200b\u662f\u200b\u5982\u4f55\u200b\u5efa\u7acb\u200b\u8fd9\u4e2a\u200b\u8fde\u63a5\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u53d1\u9001\u200b\u548c\u200b\u63a5\u6536\u6570\u636e\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4ee3\u7801\u200b\u6765\u200b\u7406\u89e3\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;netinet/in.h&gt;\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u7f51\u7edc\u5730\u5740\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\u7aef\u53e3\u53f7\u200b\uff0c\u200b\u7aef\u53e3\u200b\u4e00\u65e6\u200b\u7ed1\u5b9a\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u518d\u6b21\u200b\u7ed1\u5b9a\u200b\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u8fdb\u5165\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  if (-1 == listen(servfd, 10)) {\n    perror(\"listen error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  getchar();\n  close(servfd);\n\n  return 0;\n}\n</code></pre> <p>\u200b\u7f16\u8bd1\u200b\u8fd0\u884c\u200b\u4e0a\u9762\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u540e\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>netstat -anop |grep 9090</code> \u200b\u67e5\u770b\u200b\u6307\u5b9a\u200b\u7aef\u53e3\u200b\u7684\u200b\u7f51\u7edc\u200b\u72b6\u6001\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u6b64\u65f6\u200b\u7684\u200b\u670d\u52a1\u5668\u7aef\u200b\u662f\u200b\u6b63\u5e38\u200b\u542f\u52a8\u200b\u7684\u200b\u72b6\u6001\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u6b64\u65f6\u200b\u518d\u200b\u5c06\u200b\u6b64\u200b\u7a0b\u5e8f\u200b\u4ee5\u200b\u76f8\u540c\u200b\u7684\u200b IP \u200b\u548c\u200b\u7aef\u53e3\u200b\u542f\u52a8\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u9519\u8bef\u200b\u3002\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u7aef\u53e3\u200b\u5df2\u200b\u88ab\u200b\u5360\u7528\u200b\uff0c\u200b\u4e00\u4e2a\u200b IP \u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7aef\u53e3\u200b\u53ea\u80fd\u200b\u88ab\u200b\u7ed1\u5b9a\u200b\u4e00\u6b21\u200b\uff0c\u200b\u5c31\u200b\u8ddf\u200b\u5750\u8f66\u200b\u4e00\u6837\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u5ea7\u4f4d\u200b\u53ea\u80fd\u200b\u5750\u200b\u4e00\u4e2a\u200b\u4eba\u200b\u3002</p> <p></p> <p>\u200b\u6dfb\u52a0\u200b\u4e86\u200b <code>listen</code>  \u200b\u5c31\u200b\u610f\u5473\u7740\u200b\u8fd9\u4e2a\u200b\u670d\u52a1\u5668\u7aef\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u8fde\u63a5\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u5ba2\u6237\u7aef\u200b\u53ef\u4ee5\u200b\u8fde\u63a5\u200b\u5230\u200b\u6b64\u200b\u670d\u52a1\u7aef\u200b\u4e2d\u200b\u3002\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u7f51\u7edc\u200b\u52a9\u624b\u200b\u5de5\u5177\u200b\u5411\u200b\u670d\u52a1\u5668\u200b\u53d1\u8d77\u200b\u8fde\u63a5\u200b\uff0c\u200b\u6b64\u65f6\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u4ee5\u200b\u8fde\u63a5\u200b\u6210\u529f\u200b\uff0c\u200b\u540c\u6837\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>netstat</code> \u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\u7f51\u7edc\u200b\u72b6\u6001\u200b\uff0c\u200b\u6b64\u65f6\u200b\u591a\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>ESTABLISHED</code> \u200b\u72b6\u6001\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u6b64\u65f6\u200b\u5ba2\u6237\u7aef\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4e0e\u200b\u670d\u52a1\u5668\u7aef\u200b\u8fdb\u884c\u200b\u901a\u4fe1\u200b\uff0c\u200b\u4f46\u662f\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u200b\u663e\u793a\u200b\u6570\u636e\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u6ca1\u6709\u200b\u6dfb\u52a0\u200b\u63a5\u6536\u6570\u636e\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002</p> <p></p> <p>\u200b\u670d\u52a1\u5668\u7aef\u200b\u8981\u200b\u5411\u200b\u63a5\u6536\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u8fd8\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b fd \u200b\u4e0e\u200b\u5ba2\u6237\u7aef\u200b\u5efa\u7acb\u200b\u4e00\u5bf9\u4e00\u200b\u7684\u200b\u8fde\u63a5\u200b\u5173\u7cfb\u200b\uff0c\u200b\u6b64\u65f6\u200b\u9700\u8981\u200b\u8c03\u7528\u200b <code>accpt</code> \u200b\u51fd\u6570\u200b\u3002\u200b\u4e3a\u4ec0\u4e48\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\u5173\u7cfb\u200b\u8fd8\u8981\u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200b fd \u2014\u2014 \u200b\u8fd9\u200b\u5c31\u200b\u597d\u6bd4\u200b\u6709\u200b\u4e00\u4e2a\u200b\u9152\u5e97\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>socket</code> \u200b\u51fd\u6570\u200b\u62db\u200b\u5230\u200b\u4e00\u4e2a\u200b\u8fce\u5bbe\u200b\u5c0f\u59d0\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>bind</code> \u200b\u51fd\u6570\u200b\u5c06\u200b\u8fce\u5bbe\u200b\u5c0f\u59d0\u200b\u5b89\u6392\u200b\u5230\u200b\u56fa\u5b9a\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u8fdb\u884c\u200b\u8fce\u5bbe\u200b\uff0c\u200b\u6b64\u65f6\u200b\u6765\u200b\u4e86\u200b\u5ba2\u4eba\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u8ba9\u200b\u8fce\u5bbe\u200b\u5c0f\u59d0\u200b\u5e26\u5230\u200b\u9152\u5e97\u200b\u5185\u90e8\u200b\uff0c\u200b\u7136\u540e\u200b\u5c31\u200b\u4f1a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u670d\u52a1\u5458\u200b\u4e3a\u200b\u8fd9\u4e2a\u200b\u5ba2\u4eba\u200b\u63d0\u4f9b\u200b\u70b9\u5355\u200b\u7b49\u200b\u670d\u52a1\u200b\uff0c\u200b\u800c\u200b\u8fce\u5bbe\u200b\u5c0f\u59d0\u200b\u7ee7\u7eed\u200b\u53bb\u200b\u539f\u6765\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u7b49\u5f85\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5ba2\u4eba\u200b\u3002\u200b\u8fd9\u91cc\u200b\u65b0\u200b\u7684\u200b\u670d\u52a1\u5458\u200b\u5c31\u200b\u76f8\u5f53\u200b\u4e0e\u200b\u65b0\u200b\u7684\u200b fd\uff0c\u200b\u4e3a\u200b\u5ba2\u4eba\u200b\u5355\u72ec\u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b\u5c31\u662f\u200b\u5efa\u7acb\u200b\u4e00\u5bf9\u4e00\u200b\u7684\u200b\u5173\u7cfb\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u901a\u8fc7\u200b\u7b80\u5355\u200b\u7684\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u8fdb\u884c\u200b\u7406\u89e3\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;netinet/in.h&gt;\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u7f51\u7edc\u5730\u5740\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\u7aef\u53e3\u53f7\u200b\uff0c\u200b\u7aef\u53e3\u200b\u4e00\u65e6\u200b\u7ed1\u5b9a\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u518d\u6b21\u200b\u7ed1\u5b9a\u200b\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u8fdb\u5165\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  printf(\"before listen\\n\");\n  if (-1 == listen(servfd, 10)) {\n    perror(\"listen error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n  printf(\"after listen\\n\");\n\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  int addr_len = sizeof(clnt_addr);\n  int clntfd = accept(servfd, (struct sockaddr *)&amp;clnt_addr, &amp;addr_len);\n  if (-1 == clntfd) {\n    perror(\"accept error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  char message[1024] = {0};\n  int count = recv(clntfd, message, 1024, 0);\n  printf(\"RECV: %s\\n\", message);\n  count = send(clntfd, message, count, 0);\n  printf(\"SEND: %d\\n\", count);\n\n  getchar();\n  close(servfd);\n\n  return 0;\n}\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u5ba2\u6237\u7aef\u200b\u4e0e\u200b\u670d\u52a1\u5668\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\u4ea4\u4e92\u200b\u3002</p> <p>\u200b\u4e0a\u8ff0\u200b\u7684\u200b\u4ee3\u7801\u200b\u5747\u200b\u6709\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5ba2\u6237\u7aef\u200b\u53ef\u4ee5\u200b\u8fde\u63a5\u200b\u591a\u4e2a\u200b\uff0c\u200b\u4f46\u662f\u200b\u7f16\u5199\u200b\u7684\u200b\u670d\u52a1\u5668\u7aef\u200b\u7a0b\u5e8f\u200b\u53ea\u80fd\u200b\u5904\u7406\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u3002\u200b\u5728\u200b\u4e0a\u9762\u200b\u4e5f\u200b\u63d0\u5230\u200b\u8fc7\u200b\uff0c\u200b\u6bcf\u200b\u8fde\u63a5\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u5c31\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b fd \u200b\u4e0e\u200b\u4e4b\u200b\u4e00\u4e00\u5bf9\u5e94\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u8be5\u200b\u5982\u4f55\u200b\u505a\u5230\u200b\u3002\u200b\u8fd9\u91cc\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff1a\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\uff0c\u200b\u5728\u200b\u5faa\u73af\u200b\u4e2d\u200b\u901a\u8fc7\u200b <code>accept</code> \u200b\u5c06\u200b fd \u200b\u4e0e\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\u5efa\u7acb\u200b\u4e00\u5bf9\u4e00\u200b\u7684\u200b\u5173\u7cfb\u200b\uff0c\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;netinet/in.h&gt;\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u7f51\u7edc\u5730\u5740\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\u7aef\u53e3\u53f7\u200b\uff0c\u200b\u7aef\u53e3\u200b\u4e00\u65e6\u200b\u7ed1\u5b9a\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u518d\u6b21\u200b\u7ed1\u5b9a\u200b\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u8fdb\u5165\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  printf(\"before listen\\n\");\n  if (-1 == listen(servfd, 10)) {\n    perror(\"listen error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n  printf(\"after listen\\n\");\n\n  while (1) {\n    struct sockaddr_in clnt_addr;\n    memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n    int addr_len = sizeof(clnt_addr);\n    int clntfd = accept(servfd, (struct sockaddr *)&amp;clnt_addr, &amp;addr_len);\n    if (-1 == clntfd) {\n      perror(\"accept error\");\n      close(servfd);\n      exit(EXIT_FAILURE);\n    }\n\n    char message[1024] = {0};\n    int count = recv(clntfd, message, 1024, 0);\n    printf(\"RECV: %s\\n\", message);\n    count = send(clntfd, message, count, 0);\n    printf(\"SEND: %d\\n\", count);\n  }\n\n  getchar();\n  close(servfd);\n\n  return 0;\n}\n</code></pre> <p>\u200b\u73b0\u5728\u200b\u8fd9\u4e2a\u200b\u670d\u52a1\u5668\u7aef\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u4e2a\u200b\u7a0b\u5e8f\u200b\u8fd8\u662f\u200b\u5b58\u5728\u200b\u7f3a\u9677\u200b\uff1a\u200b\u8fd9\u4e2a\u200b\u670d\u52a1\u5668\u7aef\u200b\u53ea\u80fd\u200b\u6309\u5e8f\u200b\u5904\u7406\u200b\u8fde\u63a5\u200b\u4e0a\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u5728\u200b\u540c\u4e00\u200b\u65f6\u523b\u200b\u53ea\u80fd\u200b\u5904\u7406\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\u3002\u200b\u5982\u679c\u200b\u4e0d\u662f\u200b\u6309\u5e8f\u200b\u7684\u200b\u5904\u7406\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u7a0b\u5e8f\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u963b\u585e\u4f4f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u6d41\u7a0b\u56fe\u200b\u7406\u89e3\u200b\u963b\u585e\u200b\u7684\u200b\u5730\u65b9\u200b\u3002</p> <pre><code>flowchart TD\n  A[socket] --&gt; B[bind]\n  B[bind] --&gt; C[accept]\n  C[accept] --&gt; D[recv]\n  D[recv] --&gt; |Yes| E[printf]\n  E[printf] -- \u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b--&gt; C[accept]\n  D[recv] --&gt; F[recturn]</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4e0a\u8ff0\u200b\u7684\u200b\u6d41\u7a0b\u56fe\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u6309\u5e8f\u200b\u5904\u7406\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u5f53\u200b\u7a0b\u5e8f\u200b\u542f\u52a8\u200b\u540e\u200b\uff0c\u200b\u6b64\u65f6\u200b\u7a0b\u5e8f\u200b\u5c31\u200b\u5230\u200b\u4e86\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u7684\u200b <code>accept</code> \u200b\u8fd9\u91cc\u200b\uff0c\u200b\u7b49\u5f85\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\u3002\u200b\u4e00\u65e6\u200b\u7b2c\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u8fde\u63a5\u200b\u6210\u529f\u200b\u540e\u200b\uff0c\u200b\u7a0b\u5e8f\u200b\u5c31\u200b\u5230\u200b\u4e86\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u7684\u200b <code>recv</code> \u200b\u8fd9\u91cc\u200b\u3002\u200b\u7136\u800c\u200b\u8fd9\u4e2a\u200b\u6d41\u7a0b\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u7ed3\u675f\u200b\uff0c\u200b\u6211\u4eec\u200b\u53c8\u200b\u8fde\u63a5\u200b\u4e86\u200b\u5176\u4ed6\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4f7f\u7528\u200b\u5176\u4ed6\u200b\u5ba2\u6237\u7aef\u200b\u8fdb\u884c\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u670d\u52a1\u5668\u7aef\u200b\u5f53\u7136\u200b\u6536\u4e0d\u5230\u200b\u6570\u636e\u200b\u3002\u200b\u56e0\u4e3a\u200b\u7b2c\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u7a0b\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u8dd1\u200b\u5b8c\u200b\uff0c\u200b\u5176\u4ed6\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u7a0b\u200b\u600e\u4e48\u200b\u53ef\u80fd\u200b\u6267\u884c\u200b\u3002\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u6bcf\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u80fd\u591f\u200b\u72ec\u7acb\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u7528\u5230\u200b\u7ebf\u7a0b\u200b\uff0c\u200b\u4e00\u65e6\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u8fde\u63a5\u200b\u540e\u200b\u5c31\u200b\u7acb\u5373\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u8fdb\u884c\u200b\u7ba1\u7406\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u56e0\u4e3a\u200b\u4ee3\u7801\u200b\u903b\u8f91\u200b\u800c\u200b\u963b\u585e\u200b\u3002\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;pthread.h&gt;\n\nvoid * client_thread(void *arg);\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u7f51\u7edc\u5730\u5740\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\u7aef\u53e3\u53f7\u200b\uff0c\u200b\u7aef\u53e3\u200b\u4e00\u65e6\u200b\u7ed1\u5b9a\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u518d\u6b21\u200b\u7ed1\u5b9a\u200b\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u8fdb\u5165\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  printf(\"before listen\\n\");\n  if (-1 == listen(servfd, 10)) {\n    perror(\"listen error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n  printf(\"after listen\\n\");\n\n  while (1) {\n    struct sockaddr_in clnt_addr;\n    memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n    int addr_len = sizeof(clnt_addr);\n    int clntfd = accept(servfd, (struct sockaddr *)&amp;clnt_addr, &amp;addr_len);\n    if (-1 == clntfd) {\n      perror(\"accept error\");\n      close(servfd);\n      exit(EXIT_FAILURE);\n    }\n\n    pthread_t cthread;\n    pthread_create(&amp;cthread, NULL, client_thread, &amp;clntfd);\n  }\n\n  getchar();\n  close(servfd);\n\n  return 0;\n}\n\nvoid* client_thread(void *arg) {\n  int clntfd = *(int *)arg;\n\n  char message[1024] = {0};\n  int count = recv(clntfd, message, 1024, 0);\n  printf(\"RECV: %s\\n\", message);\n  count = send(clntfd, message, count, 0);\n  printf(\"SEND: %d\\n\", count);\n}\n</code></pre> <p>\u200b\u73b0\u5728\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u72ec\u7acb\u200b\u53d1\u9001\u200b\u6d88\u606f\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0a\u8ff0\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u5728\u200b\u5904\u7406\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\u65f6\u200b\uff0c\u200b\u53d1\u73b0\u200b\u53ea\u80fd\u200b\u5904\u7406\u200b\u4e00\u6b21\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u6765\u200b\u7684\u200b\u6d88\u606f\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u4e3b\u8981\u200b\u662f\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u903b\u8f91\u200b\u53ea\u662f\u200b\u8fdb\u884c\u200b\u4e86\u200b\u4e00\u6b21\u200b\u5904\u7406\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5728\u200b\u63a5\u6536\u200b\u6d88\u606f\u200b\u7684\u200b\u5730\u65b9\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\u5373\u53ef\u200b\u5b9e\u73b0\u200b\u591a\u6b21\u200b\u63a5\u6536\u200b\uff0c\u200b\u4fee\u6539\u200b\u7684\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>void* client_thread(void *arg) {\n  int clntfd = *(int *)arg;\n\n  while (1) {\n    char message[1024] = {0};\n    int count = recv(clntfd, message, 1024, 0);\n    printf(\"RECV: %s\\n\", message);\n    count = send(clntfd, message, count, 0);\n    printf(\"SEND: %d\\n\", count);\n  }\n}\n</code></pre> <p>\u200b\u81f3\u6b64\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u591a\u200b\u5ba2\u6237\u7aef\u200b\u72ec\u7acb\u200b\u53d1\u9001\u6570\u636e\u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u7a0b\u5e8f\u200b\u5df2\u200b\u5b8c\u6210\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u670d\u52a1\u7aef\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6a21\u578b\u200b\u662f\u200b\u4e00\u200b\u8bf7\u6c42\u200b\u4e00\u7ebf\u200b\u7a0b\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u5b58\u5728\u200b\u4e00\u4e9b\u200b\u7f3a\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u5f53\u200b\u5e76\u53d1\u200b\u6570\u200b\u8f83\u5927\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u5927\u91cf\u200b\u7ebf\u7a0b\u200b\u6765\u200b\u5904\u7406\u200b\u8fde\u63a5\u200b\uff0c\u200b\u7cfb\u7edf\u8d44\u6e90\u200b\u5360\u7528\u200b\u8f83\u5927\u200b</li> <li>\u200b\u8fde\u63a5\u200b\u5efa\u7acb\u200b\u540e\u200b\uff0c\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u7ebf\u7a0b\u200b\u6682\u65f6\u200b\u6ca1\u6709\u200b\u6570\u636e\u200b\u53ef\u200b\u8bfb\u200b\uff0c\u200b\u5219\u200b\u8be5\u200b\u7ebf\u7a0b\u200b\u5219\u200b\u4f1a\u200b\u963b\u585e\u200b\u5728\u200b <code>recv</code> \u200b\u64cd\u4f5c\u200b\u4e0a\u200b\uff0c\u200b\u9020\u6210\u200b\u7ebf\u7a0b\u200b\u6d6a\u8d39\u200b</li> </ul> <p></p> <p>\u200b\u5728\u200b\u6700\u540e\u200b\u8fd8\u200b\u53d1\u73b0\u200b\u4e00\u4e2a\u200b\u5c0f\u200b\u95ee\u9898\u200b\uff0c\u200b\u4e0a\u9762\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5f53\u200b\u5ba2\u6237\u7aef\u200b\u65ad\u5f00\u8fde\u63a5\u200b\u540e\u200b\uff0c\u200b\u670d\u52a1\u5668\u7aef\u200b\u4f1a\u200b\u4e00\u76f4\u200b\u53d1\u9001\u200b\u7a7a\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u67d0\u200b\u4e00\u200b\u65f6\u523b\u200b\u4f1a\u200b\u51fa\u73b0\u200b cpu \u200b\u4f7f\u7528\u7387\u200b 100% \u200b\u7684\u200b\u60c5\u51b5\u200b\u3002\u200b\u4e3b\u8981\u200b\u539f\u56e0\u200b\u662f\u200b\u670d\u52a1\u5668\u7aef\u200b\u6ca1\u6709\u200b\u5bf9\u200b\u5ba2\u6237\u7aef\u200b\u65ad\u5f00\u8fde\u63a5\u200b\u7684\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\uff0c\u200b\u4e00\u65e6\u200b\u5ba2\u6237\u7aef\u200b\u65ad\u5f00\u8fde\u63a5\u200b\uff0c\u200b\u670d\u52a1\u5668\u7aef\u200b\u63a5\u6536\u200b\u5230\u200b\u7684\u200b\u6570\u636e\u200b\u5927\u5c0f\u200b\u5c31\u200b\u4e3a\u200b 0\uff0c\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u8fd4\u56de\u503c\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\uff0c\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;pthread.h&gt;\n\nvoid * client_thread(void *arg);\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u7f51\u7edc\u5730\u5740\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\u7aef\u53e3\u53f7\u200b\uff0c\u200b\u7aef\u53e3\u200b\u4e00\u65e6\u200b\u7ed1\u5b9a\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u518d\u6b21\u200b\u7ed1\u5b9a\u200b\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u8fdb\u5165\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  printf(\"before listen\\n\");\n  if (-1 == listen(servfd, 10)) {\n    perror(\"listen error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n  printf(\"after listen\\n\");\n\n  while (1) {\n    struct sockaddr_in clnt_addr;\n    memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n    int addr_len = sizeof(clnt_addr);\n    int clntfd = accept(servfd, (struct sockaddr *)&amp;clnt_addr, &amp;addr_len);\n    if (-1 == clntfd) {\n      perror(\"accept error\");\n      close(servfd);\n      exit(EXIT_FAILURE);\n    }\n\n    pthread_t cthread;\n    pthread_create(&amp;cthread, NULL, client_thread, &amp;clntfd);\n  }\n\n  getchar();\n  close(servfd);\n\n  return 0;\n}\n\nvoid* client_thread(void *arg) {\n  int clntfd = *(int *)arg;\n\n  while (1) {\n    char message[1024] = {0};\n    int count = recv(clntfd, message, 1024, 0);\n    if (0 == count) {\n      printf(\"client disconnect: %d\\n\", clntfd);\n      close(clntfd);\n      break;\n    }\n    printf(\"RECV: %s\\n\", message);\n    count = send(clntfd, message, count, 0);\n    printf(\"SEND: %d\\n\", count);\n  }\n}\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html","title":"TCP/IP \u200b\u7f51\u7edc\u200b\u7f16\u7a0b","text":"<p>\u200b\u9605\u8bfb\u200b\u9700\u8981\u200b\u5177\u5907\u200b\u7684\u200b\u57fa\u7840\u200b\uff1a\u200b\u719f\u6089\u200b C \u200b\u8bed\u8a00\u200b\u7f16\u7a0b\u200b\u3001\u200b\u719f\u6089\u200b C \u200b\u8bed\u8a00\u200b\u7a0b\u5e8f\u200b\u5728\u200b Linux \u200b\u6216\u200b Windows \u200b\u4e0b\u200b\u7684\u200b\u7f16\u5199\u200b\u548c\u200b\u7f16\u8bd1\u200b\u3002</p> <p>\u200b\u4e66\u4e2d\u200b\u4ee3\u7801\u8fd0\u884c\u200b\u73af\u5883\u200b\uff1aNeovim \u200b\u7f16\u8f91\u5668\u200b\u3001gcc 9.4.0 \u200b\u7f16\u8bd1\u5668\u200b\u3001Ubuntu 20.04 \u200b\u53d1\u884c\u7248\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u7406\u89e3\u7f51\u7edc\u7f16\u7a0b\u548c\u5957\u63a5\u5b57","title":"\u7406\u89e3\u200b\u7f51\u7edc\u200b\u7f16\u7a0b\u200b\u548c\u200b\u5957\u200b\u63a5\u5b57","text":"<p>\u200b\u7f51\u7edc\u200b\u7f16\u7a0b\u200b\u5c31\u662f\u200b\u7f16\u5199\u7a0b\u5e8f\u200b\u8ba9\u200b\u4e24\u4e2a\u200b\u8ba1\u7b97\u673a\u200b\u8fdb\u884c\u200b\u6570\u636e\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e38\u7528\u200b\u7684\u200b\u7f51\u7edc\u200b\u5957\u200b\u63a5\u5b57\u200b\u6709\u200b\u4e24\u79cd\u200b\u7c7b\u578b\u200b\uff1aTCP \u200b\u5957\u200b\u63a5\u5b57\u200b\u548c\u200b UDP \u200b\u5957\u200b\u63a5\u5b57\u200b(\u200b\u5957\u200b\u63a5\u5b57\u200b\u662f\u200b\u4ec0\u4e48\u200b\u4e1c\u897f\u200b\u8bf7\u200b\u81ea\u884c\u200b\u9605\u8bfb\u200b\u4e66\u7c4d\u200b\u7406\u89e3\u200b)\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5148\u200b\u4ece\u200b TCP \u200b\u5957\u200b\u63a5\u5b57\u200b\u6765\u200b\u4e86\u89e3\u200b\u5177\u4f53\u200b\u7684\u200b\u7f51\u7edc\u200b\u7f16\u7a0b\u200b\u6d41\u7a0b\u200b\uff0cTCP \u200b\u5957\u200b\u63a5\u5b57\u200b\u5728\u200b\u7f16\u7a0b\u200b\u7f51\u7edc\u200b\u7a0b\u5e8f\u200b\u65f6\u200b\u4e00\u822c\u200b\u4f1a\u200b\u5206\u4e3a\u200b\u670d\u52a1\u5668\u7aef\u200b\u548c\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u4e24\u8005\u200b\u7684\u200b\u6d41\u7a0b\u200b\u662f\u200b\u4e0d\u200b\u4e00\u6837\u200b\u7684\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u670d\u52a1\u5668\u7aef\u6d41\u7a0b","title":"\u670d\u52a1\u5668\u7aef\u200b\u6d41\u7a0b","text":"<p>tcp \u200b\u670d\u52a1\u5668\u7aef\u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u4e00\u822c\u200b\u6709\u200b\u56db\u6b65\u200b\uff0c\u200b\u5728\u200b Windows \u200b\u4e2d\u5219\u200b\u8981\u200b\u591a\u200b\u51e0\u6b65\u200b\uff0c\u200b\u591a\u200b\u7684\u200b\u8fd9\u200b\u51e0\u6b65\u200b\u662f\u200b\u4ec5\u9650\u200b\u5bf9\u5e93\u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5148\u770b\u200b\u4e24\u4e2a\u200b\u5171\u6709\u200b\u7684\u200b\u56db\u6b65\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b \u2014\u2014&gt; \u200b\u76f8\u5f53\u4e8e\u200b\u8d2d\u4e70\u200b\u4e00\u4e2a\u200b\u624b\u673a\u200b\uff0c\u200b\u6ca1\u6709\u200b\u624b\u673a\u200b\u5c31\u200b\u65e0\u6cd5\u200b\u8fdb\u884c\u200b\u901a\u4fe1\u200b</li> </ol> LinuxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint socket(int domain, int type, int protocol);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b INVALID_SOCKET\nSOCKET socket(int af, int type, int protocol);\n</code></pre> <ol> <li>\u200b\u7ed9\u200b\u5957\u200b\u63a5\u5b57\u200b\u7ed1\u5b9a\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b \u2014\u2014&gt; \u200b\u9700\u8981\u200b\u7528\u200b\u4f60\u200b\u7684\u200b\u8eab\u4efd\u200b\u4fe1\u606f\u200b\u7ed1\u5b9a\u200b\u624b\u673a\u53f7\u7801\u200b</li> </ol> LinuxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nint bind(SOCKET s, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre> <ol> <li>\u200b\u5c06\u200b\u5957\u200b\u63a5\u5b57\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u63a5\u6536\u200b\u8fde\u63a5\u200b\u7684\u200b\u72b6\u6001\u200b \u2014\u2014&gt; \u200b\u8ba9\u200b\u624b\u673a\u200b\u5904\u4e8e\u200b\u5f00\u673a\u200b\u72b6\u6001\u200b\uff0c\u200b\u5c31\u200b\u80fd\u200b\u63a5\u542c\u7535\u8bdd\u200b</li> </ol> LinuxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint listen(int sockfd, int backlog);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nint listen(SOCKET s, int backlog);\n</code></pre> <ol> <li>\u200b\u63a5\u6536\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b \u2014\u2014&gt; \u200b\u63a5\u542c\u7535\u8bdd\u200b</li> </ol> LinuxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u975e\u8d1f\u200b\u6574\u6570\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6574\u6570\u200b\u662f\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u975e\u8d1f\u200b\u6574\u6570\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6574\u6570\u200b\u662f\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nSOCKET accept(SOCKET s, struct sockaddr *addr, socklen_t *addrlen);\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b Windows \u200b\u7f16\u5199\u200b\u7f51\u7edc\u200b\u76f8\u5173\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b <code>winsock2.h</code> \u200b\u5e93\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u7f16\u8bd1\u200b\u7684\u200b\u65f6\u5019\u200b\u9700\u8981\u200b\u94fe\u63a5\u200b <code>ws2_32</code>\u3002\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u9700\u200b\u521d\u59cb\u5316\u200b\u6b64\u5e93\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u7ed3\u675f\u200b\u7684\u200b\u65f6\u5019\u200b\u9700\u8981\u200b\u6ce8\u9500\u200b\u6b64\u5e93\u200b\uff0c\u200b\u51fd\u6570\u200b\u5982\u4e0b\u200b</p> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b\u975e\u200b 0 \u200b\u7684\u200b\u9519\u8bef\u4ee3\u7801\u200b\u503c\u200b\nint WSAStartup(WORD wVersionRequested, LPWSDATA lpWSAData);\n\n// WORD \u200b\u8868\u793a\u200b winsock \u200b\u7684\u200b\u7248\u672c\u200b\u7c7b\u578b\u200b\uff0c\u200b\u76f4\u63a5\u200b\u4f20\u9012\u200b\u5219\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u5341\u516d\u8fdb\u5236\u200b\u8868\u793a\u200b\uff0c\u200b\u9ad8\u200b 8 \u200b\u4f4d\u4e3a\u200b\u526f\u200b\u7248\u672c\u53f7\u200b\uff0c\u200b\u4f4e\u200b\u516b\u4f4d\u200b\u4e3a\u4e3b\u200b\u7248\u672c\u53f7\u200b\uff0c\u200b\u5982\u200b\uff1a0x0102\n// \u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b MAKEWORD \u200b\u51fd\u6570\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u4e3b\u200b\u7248\u672c\u53f7\u200b\u548c\u200b\u526f\u200b\u7248\u672c\u53f7\u200b\uff0c\u200b\u5982\u200b MAKEWORD(2, 1);\n// \u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b WSADATA \u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u4f20\u5165\u200b\u5373\u53ef\u200b\n\nint WSACleanup(void);\n</code></pre> <p>\u200b\u9664\u6b64\u4e4b\u5916\u200b\uff0cWindows \u200b\u4e0b\u200b\u5173\u95ed\u200b\u5957\u200b\u63a5\u5b57\u200b\u4e5f\u200b\u662f\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u51fd\u6570\u200b</p> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nint closesocket(SOCKET s);\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u5ba2\u6237\u7aef\u6d41\u7a0b","title":"\u5ba2\u6237\u7aef\u200b\u6d41\u7a0b","text":"<p>\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6d41\u7a0b\u200b\u76f8\u6bd4\u200b\u670d\u52a1\u5668\u7aef\u200b\u5c31\u200b\u7b80\u5355\u200b\u5f88\u591a\u200b\u4e86\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b 2 \u200b\u6b65\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u8fd9\u200b\u4e0e\u200b\u670d\u52a1\u5668\u7aef\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\uff0c\u200b\u7f51\u7edc\u200b\u7684\u200b\u524d\u63d0\u200b\u662f\u200b\u6709\u200b\u5957\u200b\u63a5\u5b57\u200b\u7684\u200b\u5b58\u5728\u200b</li> <li>\u200b\u5411\u200b\u670d\u52a1\u5668\u7aef\u200b\u53d1\u9001\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u6b64\u200b\u8bf7\u6c42\u200b\u5fc5\u987b\u200b\u5728\u200b\u670d\u52a1\u5668\u7aef\u200b\u5904\u4e8e\u200b\u76d1\u542c\u200b\u72b6\u6001\u200b\u624d\u200b\u6709\u7528\u200b</li> </ol> LiunxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nint connect(SOCKET s, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre> <p></p> <p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u4e24\u4e2a\u200b\u6d41\u7a0b\u200b\u662f\u200b\u7f16\u5199\u200b TCP \u200b\u670d\u52a1\u5668\u7aef\u200b\u548c\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u57fa\u672c\u200b\u7a0b\u5e8f\u200b\u6846\u67b6\u200b\uff0c\u200b\u81f3\u4e8e\u200b\u4ec0\u4e48\u200b\u662f\u200b\u5730\u5740\u200b\u65cf\u200b\uff1f\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u5982\u4f55\u200b\u8868\u793a\u200b\uff1f\u200b\u7f51\u7edc\u5730\u5740\u200b\u5982\u4f55\u200b\u5206\u914d\u200b\u7b49\u200b\u95ee\u9898\u200b\uff0c\u200b\u6b64\u5904\u200b\u4e0d\u200b\u505a\u200b\u8be6\u7ec6\u200b\u7684\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u8bf7\u200b\u81ea\u884c\u200b\u9605\u8bfb\u200b\u4e66\u4e2d\u200b\u5185\u5bb9\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u57fa\u4e8e-tcp-\u7684\u670d\u52a1\u5668\u7aef\u548c\u5ba2\u6237\u7aef","title":"\u57fa\u4e8e\u200b TCP \u200b\u7684\u200b\u670d\u52a1\u5668\u7aef\u200b\u548c\u200b\u5ba2\u6237\u7aef","text":"<p>\u200b\u5728\u200b\u4e86\u89e3\u200b\u57fa\u672c\u200b\u7684\u200b\u6982\u5ff5\u200b\u4ee5\u540e\u200b\u548c\u200b\u57fa\u672c\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u6846\u67b6\u200b\uff0c\u200b\u4e0b\u9762\u200b\u4ee5\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b TCP \u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u548c\u200b\u5ba2\u6237\u7aef\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u670d\u52a1\u5668\u7aef\u7684\u5b9e\u73b0","title":"\u670d\u52a1\u5668\u7aef\u200b\u7684\u200b\u5b9e\u73b0","text":"LinuxWindows <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(sockfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind() error\");\n    close(sockfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u6253\u5f00\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\uff0c\u200b\u8fdb\u5165\u200b\u76d1\u542c\u200b\n  if (-1 == listen(sockfd, 5)) {\n    perror(\"listen() error\");\n    close(sockfd);\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  socklen_t clnt_len = sizeof(clnt_addr);\n  for (int i = 0; i &lt; 5; ++i) {\n    int clntfd = accept(sockfd, (struct sockaddr *)&amp;clnt_addr, &amp;clnt_len);\n    if (-1 == clntfd) {\n      perror(\"accept() error\");\n      close(sockfd);\n      exit(EXIT_FAILURE);\n    } else {\n      printf(\"Connected clinet: %d\\n\", clntfd);\n    }\n\n    char message[1024] = {0};\n    int str_len = 0;\n    while (0 != (str_len = read(clntfd, message, 1024)))\n      write(clntfd, message, str_len);\n\n    close(clntfd);\n  }\n  close(sockfd);\n\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;WinSock2.h&gt;\n\nvoid error_handling(const char *msg);\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // \u200b\u521d\u59cb\u5316\u200b winsock \u200b\u5e93\u200b\n  WSADATA wsa_data;\n  WSAStartup(MAKEWORD(2, 2), &amp;wsa_data);\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  SOCKET serv_sock = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == serv_sock)\n    error_handling(\"socket error\");\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u672c\u5730\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(serv_sock, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    closesocket(serv_sock);\n    error_handling(\"bind error\");\n  }\n\n  // 3. \u200b\u6253\u5f00\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  if (-1 == listen(serv_sock, 5)) {\n    closesocket(serv_sock);\n    error_handling(\"listen error\");\n  }\n\n  // 4. \u200b\u63a5\u6536\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\n  struct sockaddr_in clnt_addr;\n  int clnt_len = sizeof(clnt_addr);\n  SOCKET clnt_sock = accept(serv_sock, (struct sockaddr *)&amp;clnt_addr, &amp;clnt_len );\n  if (-1 == clnt_sock) {\n    closesocket(serv_sock);\n    error_handling(\"accept error\");\n  }\n  char message[] = \"hello world!\";\n  int size = send(clnt_sock, message, sizeof(message), 0);\n  if (-1 == size) {\n    closesocket(serv_sock);\n    error_handling(\"send error\");\n  }\n\n  closesocket(clnt_sock);\n  closesocket(serv_sock);\n  // \u200b\u6ce8\u9500\u200b winsock \u200b\u5e93\u200b\n  WSACleanup();\n  return 0;\n}\n\nvoid error_handling(const char *msg) {\n  fputs(msg, stderr);\n  fputc('\\n', stderr);\n  exit(EXIT_FAILURE);\n}\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u5ba2\u6237\u7aef\u7684\u5b9e\u73b0","title":"\u5ba2\u6237\u7aef\u200b\u7684\u200b\u5b9e\u73b0","text":"LinuxWindows <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (3 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;ip&gt; &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int clntfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == clntfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u53d1\u9001\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  clnt_addr.sin_family = AF_INET;\n  clnt_addr.sin_addr.s_addr = inet_addr(argv[1]);\n  clnt_addr.sin_port = htons(atoi(argv[2]));\n  if (-1 == connect(clntfd, (struct sockaddr *)&amp;clnt_addr, sizeof(clnt_addr))) {\n    perror(\"connect() error\");\n    close(clntfd);\n    exit(EXIT_FAILURE);\n  } else {\n    printf(\"Connected ......\\n\");\n  }\n\n  while (1) {\n    printf(\"Input message(Q/q to quit): \");\n    char message[1024] = {0};\n    fgets(message, 1024, stdin);\n    if (!strcmp(message, \"q\\n\") || !strcmp(message, \"Q\\n\"))\n      break;\n\n    int len = write(clntfd, message, sizeof(message));\n    // \u200b\u7531\u4e8e\u200b\u670d\u52a1\u5668\u7aef\u200b\u662f\u200b\u5faa\u73af\u200b\u53d1\u9001\u200b\uff0c\u200b\u5982\u679c\u200b\u5ba2\u6237\u7aef\u200b\u4e00\u6b21\u200b\u63a5\u6536\u200b\uff0c\u200b\u53ef\u80fd\u200b\u63a5\u6536\u200b\u7684\u200b\u4e0d\u662f\u200b\u5b8c\u6574\u200b\u4fe1\u606f\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e5f\u200b\u5efa\u8bae\u200b\u5faa\u73af\u200b\u8bfb\u53d6\u200b\n    int recv_len = 0;\n    while (recv_len &lt; len) {\n      int rlen = read(clntfd, message, 1024);\n      if (-1 == rlen) {\n        perror(\"read() error\");\n        close(clntfd);\n        exit(EXIT_FAILURE);\n      }\n\n      recv_len += rlen;\n    }\n    printf(\"read message from server: %s\\n\", message);\n  }\n  close(clntfd);\n\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;WinSock2.h&gt;\n\n#define BUFFERSIZE 1024\n\nvoid error_handling(const char *msg);\n\nint main(int argc, char *argv[]) {\n  if (3 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;ip&gt; &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // \u200b\u521d\u59cb\u5316\u200b winsock \u200b\u5e93\u200b\n  WSADATA wsa_data;\n  WSAStartup(MAKEWORD(2, 2), &amp;wsa_data);\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  SOCKET clnt_sock = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == clnt_sock)\n    error_handling(\"socket error\");\n\n  // 2. \u200b\u5411\u200b\u670d\u52a1\u5668\u53d1\u9001\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  clnt_addr.sin_family = AF_INET;\n  clnt_addr.sin_addr.s_addr = inet_addr(argv[1]);\n  clnt_addr.sin_port = htons(atoi(argv[2]));\n  if (-1 == connect(clnt_sock, (struct sockaddr *)&amp;clnt_addr, sizeof(clnt_addr))) {\n    closesocket(clnt_sock);\n    error_handling(\"connect error\");\n  }\n\n  char buffer[BUFFERSIZE] = {0};\n  int len = recv(clnt_sock, buffer, BUFFERSIZE, 0);\n  if (-1 == len) {\n    closesocket(clnt_sock);\n    error_handling(\"recv error\");\n  }\n\n  printf(\"buffer from server: %s\\n\", buffer);\n  closesocket(clnt_sock);\n  // \u200b\u6ce8\u9500\u200b winsock \u200b\u5e93\u200b\n  WSACleanup();\n  return 0;\n}\n\nvoid error_handling(const char *msg) {\n  fputs(msg, stderr);\n  fputc('\\n', stderr);\n  exit(EXIT_FAILURE);\n}\n</code></pre> <p>\u200b\u7f16\u8bd1\u200b\u8fd0\u884c\u200b\u4e0a\u8ff0\u200b\u4e24\u4e2a\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5148\u200b\u542f\u52a8\u200b\u670d\u52a1\u7aef\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u518d\u542f\u52a8\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u3002\u200b\u6b64\u65f6\u200b\u5ba2\u6237\u7aef\u200b\u4f1a\u200b\u6536\u5230\u200b\u670d\u52a1\u7aef\u200b\u53d1\u6765\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e24\u4e2a\u200b\u7a0b\u5e8f\u200b\u90fd\u200b\u4f1a\u200b\u7acb\u5373\u200b\u9000\u51fa\u200b\u3002</p> <p>\u200b\u5728\u200b Linux \u200b\u4e2d\u5747\u200b\u4f7f\u7528\u200b <code>read</code> \u200b\u548c\u200b <code>write</code> \u200b\u51fd\u6570\u200b\uff0c\u200b\u662f\u56e0\u4e3a\u200b\u5728\u200b Linux \u200b\u4e2d\u200b\uff0c\u200b\u4e00\u5207\u90fd\u662f\u200b\u6587\u4ef6\u200b\uff0csocket \u200b\u4e5f\u200b\u662f\u200b\u6587\u4ef6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u6587\u4ef6\u200b\u76f8\u5173\u200b\u7684\u200b\u8bfb\u5199\u64cd\u4f5c\u200b\u3002\u200b\u800c\u200b\u5728\u200b Windows \u200b\u4e2d\u200b\uff0c\u200b\u7f51\u7edc\u200b\u5957\u200b\u63a5\u5b57\u200b\u548c\u200b\u6587\u4ef6\u200b\u662f\u200b\u6709\u200b\u533a\u522b\u200b\u7684\u200b\uff0c\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u7f51\u7edc\u200b\u8bfb\u5199\u200b\u4e13\u7528\u200b\u7684\u200b\u51fd\u6570\u200b <code>recv</code> \u200b\u548c\u200b <code>send</code> \u200b\u6765\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u4e5f\u200b\u9002\u7528\u200b\u3002</p> <p>\u200b\u6b64\u65f6\u200b TCP \u200b\u670d\u52a1\u5668\u7aef\u200b\u548c\u200b\u5ba2\u6237\u7aef\u200b\u90fd\u200b\u5df2\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4f46\u662f\u200b\u6709\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b \u2014\u2014 \u200b\u76ee\u524d\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u53ea\u80fd\u200b\u5904\u7406\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\u961f\u5217\u200b\u5c31\u200b\u6ca1\u6709\u200b\u5b9e\u9645\u610f\u4e49\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5982\u4f55\u200b\u624d\u80fd\u200b\u5904\u7406\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\uff1f\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u529e\u6cd5\u200b\uff0c\u200b\u5728\u200b\u53d7\u7406\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\u3001\u200b\u5904\u7406\u200b\u6570\u636e\u200b\u3001\u200b\u5173\u95ed\u200b\u5957\u200b\u63a5\u5b57\u200b\u8fd9\u4e9b\u200b\u64cd\u4f5c\u200b\u4e0a\u200b\u5728\u200b\u5957\u200b\u4e00\u5c42\u200b\u5faa\u73af\u200b\uff0c\u200b\u5176\u200b\u6d41\u7a0b\u200b\u5982\u4e0b\u200b</p> <p></p> <p>\u200b\u7b80\u5355\u200b\u7684\u200b\u4fee\u6539\u200b\u670d\u52a1\u5668\u7aef\u200b\u7684\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(sockfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind() error\");\n    close(sockfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u6253\u5f00\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\uff0c\u200b\u8fdb\u5165\u200b\u76d1\u542c\u200b\n  if (-1 == listen(sockfd, 5)) {\n    perror(\"listen() error\");\n    close(sockfd);\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  socklen_t clnt_len = sizeof(clnt_addr);\n  for (int i = 0; i &lt; 5; ++i) {\n    int clntfd = accept(sockfd, (struct sockaddr *)&amp;clnt_addr, &amp;clnt_len);\n    if (-1 == clntfd) {\n      perror(\"accept() error\");\n      close(sockfd);\n      exit(EXIT_FAILURE);\n    } else {\n      printf(\"Connected clinet: %d\\n\", clntfd);\n    }\n\n    char message[1024] = {0};\n    int str_len = 0;\n    while (0 != (str_len = read(clntfd, message, 1024)))\n      write(clntfd, message, str_len);\n\n    close(clntfd);\n  }\n  close(sockfd);\n\n  return 0;\n}\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u57fa\u4e8e-udp-\u7684\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef","title":"\u57fa\u4e8e\u200b UDP \u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u548c\u200b\u5ba2\u6237\u7aef","text":"<p>UDP \u200b\u5c31\u200b\u76f8\u5f53\u4e8e\u200b\u4ee5\u524d\u200b\u7684\u200b\u4fe1\u4ef6\u200b\u90ae\u5bc4\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4fe1\u4ef6\u200b\u7684\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u586b\u597d\u200b\uff0c\u200b\u653e\u5165\u200b\u90ae\u7b52\u200b\u4ee5\u540e\u200b\uff0c\u200b\u4fe1\u4ef6\u200b\u662f\u5426\u200b\u5230\u8fbe\u200b\u6307\u5b9a\u200b\u7684\u200b\u5730\u65b9\u200b\u6211\u4eec\u200b\u662f\u200b\u65e0\u6cd5\u200b\u77e5\u9053\u200b\u7684\u200b\uff0c\u200b\u4fe1\u4ef6\u200b\u662f\u5426\u200b\u5b8c\u597d\u65e0\u635f\u200b\u6211\u4eec\u200b\u4e5f\u200b\u662f\u200b\u65e0\u6cd5\u200b\u77e5\u9053\u200b\u7684\u200b\uff0c\u200b\u4fe1\u4ef6\u200b\u662f\u5426\u200b\u4e22\u5931\u200b\u4e5f\u200b\u65e0\u6cd5\u200b\u77e5\u9053\u200b\u3002UDP \u200b\u5c31\u662f\u200b\u53ea\u7ba1\u200b\u5c06\u200b\u6d88\u606f\u200b\u53d1\u9001\u200b\u51fa\u53bb\u200b\uff0c\u200b\u800c\u200b\u4e0d\u7ba1\u200b\u63a5\u6536\u8005\u200b\u662f\u5426\u200b\u63a5\u6536\u200b\u5230\u200b\u7684\u200b\u4e00\u79cd\u200b\u5957\u200b\u63a5\u5b57\u200b\u3002</p> <p>UDP \u200b\u4e0d\u50cf\u200b TCP \u200b\u90a3\u6837\u200b\u9700\u8981\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\uff0cTCP \u200b\u56e0\u4e3a\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\uff0c\u200b\u5957\u200b\u63a5\u5b57\u200b\u5c31\u200b\u77e5\u9053\u200b\u76ee\u6807\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\uff0c\u200b\u800c\u200b UDP \u200b\u662f\u200b\u65e0\u6cd5\u200b\u77e5\u9053\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5728\u200b\u8fdb\u884c\u200b\u901a\u4fe1\u200b\u65f6\u200b\u9700\u8981\u200b\u77e5\u9053\u200b\u76ee\u6807\u200b\u7684\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u3002\u200b\u5982\u4e0b\u200b\u51fd\u6570\u200b\u4e2d\u200b\u9700\u8981\u200b\u4f20\u5165\u200b\u76ee\u6807\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b</p> LinuxWindows <pre><code>#include &lt;sys/socket.h&gt;\n\n// @return \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u4f20\u8f93\u200b\u7684\u200b\u5b57\u8282\u6570\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\n// @ params:\n//   sock: \u200b\u7528\u4e8e\u200b\u4f20\u8f93\u6570\u636e\u200b\u7684\u200b UDP \u200b\u5957\u200b\u63a5\u5b57\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\n//   buff: \u200b\u4fdd\u5b58\u200b\u5f85\u200b\u4f20\u8f93\u6570\u636e\u200b\u7684\u200b\u7f13\u51b2\u200b\u5730\u5740\u200b\u503c\u200b\n//   nbytes: \u200b\u5f85\u200b\u4f20\u8f93\u200b\u7684\u200b\u6570\u636e\u200b\u957f\u5ea6\u200b\uff0c\u200b\u4ee5\u200b\u5b57\u8282\u200b\u4e3a\u200b\u5355\u4f4d\u200b\n//   flags: \u200b\u53ef\u9009\u9879\u200b\u53c2\u6570\u200b\uff0c\u200b\u82e5\u200b\u6ca1\u6709\u200b\u5219\u200b\u4f20\u9012\u200b 0\n//   to/from: \u200b\u5b58\u6709\u200b\u76ee\u6807\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u7684\u200b sockaddr \u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u7684\u200b\u5730\u5740\u200b\u503c\u200b\n//   adrlen: \u200b\u4f20\u9012\u200b\u7ed9\u200b\u53c2\u6570\u200b to \u200b\u7684\u200b\u5730\u5740\u200b\u503c\u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u957f\u5ea6\u200b\nssize_t sendto(int sock, void *buff, size_t nbytes, int flags,\n              struct sockaddr *to, socklen_t addrlen);\n\nssize_t recvfrom(int sock, void *buff, size_t nbytes, int flags,\n                struct sockaddr *from, socklen_t *addrlen);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// @return \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b57\u8282\u6570\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\n// @ params:\n//   sock: \u200b\u7528\u4e8e\u200b\u4f20\u8f93\u6570\u636e\u200b\u7684\u200b UDP \u200b\u5957\u200b\u63a5\u5b57\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\n//   buff: \u200b\u4fdd\u5b58\u200b\u5f85\u200b\u4f20\u8f93\u6570\u636e\u200b\u7684\u200b\u7f13\u51b2\u200b\u5730\u5740\u200b\u503c\u200b\n//   nbytes: \u200b\u5f85\u200b\u4f20\u8f93\u200b\u7684\u200b\u6570\u636e\u200b\u957f\u5ea6\u200b\uff0c\u200b\u4ee5\u200b\u5b57\u8282\u200b\u4e3a\u200b\u5355\u4f4d\u200b\n//   flags: \u200b\u53ef\u9009\u9879\u200b\u53c2\u6570\u200b\uff0c\u200b\u82e5\u200b\u6ca1\u6709\u200b\u5219\u200b\u4f20\u9012\u200b 0\n//   to/from: \u200b\u5b58\u6709\u200b\u76ee\u6807\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u7684\u200b sockaddr \u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u7684\u200b\u5730\u5740\u200b\u503c\u200b\n//   adrlen: \u200b\u4f20\u9012\u200b\u7ed9\u200b\u53c2\u6570\u200b to \u200b\u7684\u200b\u5730\u5740\u200b\u503c\u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u957f\u5ea6\u200b\nint sendto(SOCKET sock, const char *buff, size_t nbytes, int flags,\n          const struct sockaddr *to, int addrlen);\n\nint recvfrom(SOCKET sock, const char *buff, size_t nbytes, int flags,\n            const struct sockaddr *from, int *addrlen);\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#udp-\u7684\u670d\u52a1\u7aef\u5b9e\u73b0","title":"UDP \u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u5b9e\u73b0","text":"LinuxWindows <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u4f7f\u7528\u200b bind \u200b\u5206\u914d\u200b IP \u200b\u5730\u5740\u200b\uff0c\u200b\u51cf\u8f7b\u200b sendto \u200b\u7684\u200b\u529f\u80fd\u200b\n  struct sockaddr_in saddr;\n  memset(&amp;saddr, 0, sizeof(saddr));\n  saddr.sin_family = AF_INET;\n  saddr.sin_addr.s_addr = htonl(INADDR_ANY);\n  saddr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(sockfd, (struct sockaddr *)&amp;saddr, sizeof(saddr))) {\n    perror(\"bind() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in caddr;\n  memset(&amp;caddr, 0, sizeof(caddr));\n  socklen_t addr_len = sizeof(caddr);\n  while (1) {\n    char message[1024] = {0};\n    int ret = recvfrom(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, &amp;addr_len);\n    if (-1 == ret) {\n      perror(\"recvfrom() error\");\n      close(sockfd);\n      exit(EXIT_FAILURE);\n    }\n\n    sendto(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, addr_len);\n  }\n\n  close(sockfd);\n\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;winsock2.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  WSADATA ws_data;\n  WSAStartup(MAKEWORD(2, 2), &amp;ws_data);\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  SOCKET sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u4f7f\u7528\u200b bind \u200b\u5206\u914d\u200b IP \u200b\u5730\u5740\u200b\uff0c\u200b\u51cf\u8f7b\u200b sendto \u200b\u7684\u200b\u529f\u80fd\u200b\n  struct sockaddr_in saddr;\n  memset(&amp;saddr, 0, sizeof(saddr));\n  saddr.sin_family = AF_INET;\n  saddr.sin_addr.s_addr = htonl(INADDR_ANY);\n  saddr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(sockfd, (struct sockaddr *)&amp;saddr, sizeof(saddr))) {\n    perror(\"bind() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in caddr;\n  memset(&amp;caddr, 0, sizeof(caddr));\n  int addr_len = sizeof(caddr);\n  while (1) {\n    char message[1024] = {0};\n    int ret = recvfrom(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, &amp;addr_len);\n    if (-1 == ret) {\n      perror(\"recvfrom() error\");\n      closesocket(sockfd);\n      exit(EXIT_FAILURE);\n    }\n\n    sendto(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, addr_len);\n  }\n\n  closesocket(sockfd);\n  WSACleanup();\n  return 0;\n}\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#udp-\u7684\u5ba2\u6237\u7aef\u5b9e\u73b0","title":"UDP \u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u5b9e\u73b0","text":"LinuxWindows <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (3 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;ip&gt; &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in caddr;\n  memset(&amp;caddr, 0, sizeof(caddr));\n  caddr.sin_family = AF_INET;\n  caddr.sin_addr.s_addr = inet_addr(argv[1]);\n  caddr.sin_port = htons(atoi(argv[2]));\n  while (1) {\n    printf(\"Input message(q/Q to quit): \");\n    char message[1024] = {0};\n    fgets(message, 1024, stdin);\n    if (!strcmp(message, \"Q\\n\") || !strcmp(message, \"q\\n\"))\n      break;\n\n    sendto(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, sizeof(caddr));\n\n    socklen_t addr_len = sizeof(caddr);\n    recvfrom(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, &amp;addr_len);\n    printf(\"message from server: %s\\n\", message);\n  }\n\n  close(sockfd);\n\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;winsock2.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (3 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;ip&gt; &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  WSADATA ws_data;\n  WSAStartup(MAKEWORD(2, 2), &amp;ws_data);\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  SOCKET sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in caddr;\n  memset(&amp;caddr, 0, sizeof(caddr));\n  caddr.sin_family = AF_INET;\n  caddr.sin_addr.s_addr = inet_addr(argv[1]);\n  caddr.sin_port = htons(atoi(argv[2]));\n  while (1) {\n    printf(\"Input message(q/Q to quit): \");\n    char message[1024] = {0};\n    fgets(message, 1024, stdin);\n    if (!strcmp(message, \"Q\\n\") || !strcmp(message, \"q\\n\"))\n      break;\n\n    sendto(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, sizeof(caddr));\n\n    int addr_len = sizeof(caddr);\n    recvfrom(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, &amp;addr_len);\n    printf(\"message from server: %s\\n\", message);\n  }\n\n  closesocket(sockfd);\n  WSACleanup();\n  return 0;\n}\n</code></pre> <p><code>sendto</code> \u200b\u5728\u200b\u53d1\u73b0\u200b\u5c1a\u672a\u200b\u5206\u914d\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\uff0c\u200b\u81ea\u52a8\u200b\u7ed9\u200b\u5957\u200b\u63a5\u5b57\u200b\u5206\u914d\u200b IP \u200b\u5730\u5740\u200b\u548c\u200b\u7aef\u53e3\u200b\uff0c\u200b\u4f46\u662f\u200b TCP \u200b\u4e2d\u200b\u901a\u8fc7\u200b <code>bind</code> \u200b\u548c\u200b <code>connect</code> \u200b\u8fdb\u884c\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u7684\u200b\u5206\u914d\u200b\uff0c\u200b\u5728\u200b UDP \u200b\u4e2d\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b\u3002\u200b\u5982\u679c\u200b UDP \u200b\u7684\u200b\u670d\u52a1\u200b\u9700\u8981\u200b\u957f\u65f6\u95f4\u200b\u901a\u4fe1\u200b\uff0c\u200b\u5219\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b <code>connect</code> \u200b\u6216\u200b <code>bind</code> \u200b\u8fdb\u884c\u200b\u5730\u5740\u200b\u5206\u914d\u200b\uff0c\u200b\u7b80\u5316\u200b <code>sendto</code> \u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u80fd\u200b\u63d0\u5347\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6574\u4f53\u200b\u6548\u7387\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#udp-\u7684\u6570\u636e\u4f20\u8f93\u7279\u6027","title":"UDP \u200b\u7684\u200b\u6570\u636e\u4f20\u8f93\u200b\u7279\u6027","text":"<p>UDP \u200b\u7684\u200b\u6570\u636e\u4f20\u8f93\u200b\u7279\u6027\u200b\u4e0d\u540c\u4e8e\u200b TCP\uff0cUDP \u200b\u6570\u636e\u200b\u662f\u200b\u5b58\u5728\u200b\u6570\u636e\u200b\u8fb9\u754c\u200b\u7684\u200b\uff0c\u200b\u7b80\u5355\u200b\u7684\u200b\u8bf4\u200b UDP \u200b\u4e2d\u53d1\u200b\u51e0\u6b21\u200b\u6570\u636e\u200b\uff0c\u200b\u5c31\u200b\u5f97\u5206\u200b\u51e0\u6b21\u200b\u63a5\u6536\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e0b\u9762\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u8fdb\u884c\u200b\u6d4b\u8bd5\u200b\u3002</p> <p>\u200b\u670d\u52a1\u5668\u7aef\u200b:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u4f7f\u7528\u200b bind \u200b\u5206\u914d\u200b IP \u200b\u5730\u5740\u200b\uff0c\u200b\u51cf\u8f7b\u200b sendto \u200b\u7684\u200b\u529f\u80fd\u200b\n  struct sockaddr_in saddr;\n  memset(&amp;saddr, 0, sizeof(saddr));\n  saddr.sin_family = AF_INET;\n  saddr.sin_addr.s_addr = htonl(INADDR_ANY);\n  saddr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(sockfd, (struct sockaddr *)&amp;saddr, sizeof(saddr))) {\n    perror(\"bind() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  char message[1024];\n  struct sockaddr_in caddr;\n  memset(&amp;caddr, 0, sizeof(caddr));\n  socklen_t addr_len = sizeof(caddr);\n  for (int i = 0; i &lt; 3; ++i) {\n    sleep(5);\n    int ret = recvfrom(sockfd, message, 1024, 0, (struct sockaddr *)&amp;caddr, &amp;addr_len);\n    printf(\"Message %d: %s\\n\", i+1, message);\n  }\n\n  close(sockfd);\n\n  return 0;\n}\n</code></pre> <p>\u200b\u5ba2\u6237\u7aef\u200b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (3 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;ip&gt; &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in saddr;\n  memset(&amp;saddr, 0, sizeof(saddr));\n  saddr.sin_family = AF_INET;\n  saddr.sin_addr.s_addr = inet_addr(argv[1]);\n  saddr.sin_port = htons(atoi(argv[2]));\n  socklen_t addr_len = sizeof(saddr);\n  if (-1 == connect(sockfd, (struct sockaddr *)&amp;saddr, addr_len)) {\n    perror(\"connect() error\");\n    close(sockfd);\n    exit(EXIT_FAILURE);\n  } else {\n    printf(\"Connected ......\\n\");\n  }\n\n  char msg1[] = \"Hi!\";\n  char msg2[] = \"I'm another UDP host\";\n  char msg3[] = \"Nice to meet you\";\n  sendto(sockfd, msg1, sizeof(msg1), 0, (struct sockaddr *)&amp;saddr, sizeof(saddr));\n  sendto(sockfd, msg2, sizeof(msg1), 0, (struct sockaddr *)&amp;saddr, sizeof(saddr));\n  sendto(sockfd, msg3, sizeof(msg1), 0, (struct sockaddr *)&amp;saddr, sizeof(saddr));\n\n  close(sockfd);\n\n  return 0;\n}\n</code></pre> <p>\u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5ba2\u6237\u7aef\u200b\u5728\u200b\u542f\u52a8\u200b\u7684\u200b\u4e00\u77ac\u95f4\u200b\u5c31\u200b\u7ed3\u675f\u200b\uff0c\u200b\u670d\u52a1\u5668\u7aef\u200b\u4f1a\u200b\u95f4\u9694\u200b 5 \u200b\u79d2\u200b\u663e\u793a\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u6765\u200b\u7684\u200b 3 \u200b\u6761\u200b\u6570\u636e\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u4f18\u96c5\u5730\u65ad\u5f00\u5957\u63a5\u5b57\u8fde\u63a5","title":"\u4f18\u96c5\u200b\u5730\u200b\u65ad\u5f00\u200b\u5957\u200b\u63a5\u5b57\u200b\u8fde\u63a5","text":"<p>\u200b\u4e86\u89e3\u200b\u5b8c\u200b TCP \u200b\u548c\u200b UDP \u200b\u7684\u200b\u57fa\u672c\u200b\u7a0b\u5e8f\u200b\u4ee5\u540e\u200b\uff0c\u200b\u4e0b\u9762\u200b\u662f\u200b\u5bf9\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4f18\u5316\u200b\u3002\u200b\u5728\u200b\u4e4b\u524d\u200b\u7684\u200b TCP \u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u65ad\u5f00\u8fde\u63a5\u200b\u662f\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b <code>close</code> \u200b\u6216\u200b <code>closesocket</code> \u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u65ad\u5f00\u200b\u65b9\u5f0f\u200b\u662f\u200b\u4f7f\u5f97\u200b\u53cc\u65b9\u200b\u90fd\u200b\u4e0d\u80fd\u200b\u53d1\u9001\u200b\u548c\u200b\u63a5\u6536\u6570\u636e\u200b\u3002\u200b\u4f46\u200b\u5728\u200b\u4e00\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u9700\u8981\u200b\u5373\u4f7f\u200b\u65ad\u5f00\u8fde\u63a5\u200b\u4e5f\u200b\u8fde\u200b\u63a5\u6536\u6570\u636e\u200b\u6216\u200b\u53d1\u9001\u6570\u636e\u200b\u7684\u200b\u72b6\u6001\u200b\uff0c\u200b\u8fd9\u8be5\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u9996\u5148\u200b\u7406\u89e3\u200b TCP \u200b\u7684\u200b\u6570\u636e\u6d41\u200b</p> <p></p> <p>\u200b\u4e00\u65e6\u200b\u4e24\u53f0\u200b\u4e3b\u673a\u200b\u5efa\u7acb\u200b\u5957\u200b\u63a5\u5b57\u200b\u8fde\u63a5\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4e3b\u673a\u200b\u90fd\u200b\u4f1a\u200b\u62e5\u6709\u200b\u72ec\u7acb\u200b\u7684\u200b\u8f93\u5165\u200b\u6d41\u200b\u548c\u200b\u8f93\u51fa\u200b\u6d41\u200b\uff0c\u200b\u7136\u540e\u200b\u8f93\u5165\u200b\u6d41\u200b\u4e0e\u200b\u53e6\u4e00\u53f0\u200b\u7684\u200b\u8f93\u51fa\u200b\u6d41\u200b\u76f8\u8fde\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u200b\u65ad\u5f00\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u6d41\u200b\u5c31\u200b\u80fd\u200b\u5b9e\u73b0\u200b\u6211\u4eec\u200b\u60f3\u8981\u200b\u5b9e\u73b0\u200b\u7684\u200b\u529f\u80fd\u200b\u3002\u200b\u4f7f\u7528\u200b\u4e0b\u9762\u200b\u7684\u200b\u51fd\u6570\u200b</p> LinuxWindows <pre><code>#include &lt;sys/socket.h&gt;\n\n// sock: \u200b\u9700\u8981\u200b\u65ad\u5f00\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\u63cf\u8ff0\u7b26\u200b\n// howto: \u200b\u4f20\u9012\u200b\u65ad\u5f00\u200b\u7684\u200b\u65b9\u5f0f\u200b\n//        1. SHUT_RD\uff1a\u200b\u65ad\u5f00\u200b\u8f93\u5165\u200b\u6d41\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u63a5\u6536\u6570\u636e\u200b\n//        2. SHUT_WR\uff1a\u200b\u65ad\u5f00\u200b\u8f93\u51fa\u200b\u6d41\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u53d1\u9001\u6570\u636e\u200b\n//        3. SHUT_RDWR\uff1a\u200b\u540c\u65f6\u200b\u65ad\u5f00\u200b I/O \u200b\u6d41\u200b\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint shutdown(int sock, int howto);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// sock: \u200b\u9700\u8981\u200b\u65ad\u5f00\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\u63cf\u8ff0\u7b26\u200b\n// howto: \u200b\u4f20\u9012\u200b\u65ad\u5f00\u200b\u7684\u200b\u65b9\u5f0f\u200b\n//        1. SHUT_RD\uff1a\u200b\u65ad\u5f00\u200b\u8f93\u5165\u200b\u6d41\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u63a5\u6536\u6570\u636e\u200b\n//        2. SHUT_WR\uff1a\u200b\u65ad\u5f00\u200b\u8f93\u51fa\u200b\u6d41\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u53d1\u9001\u6570\u636e\u200b\n//        3. SHUT_RDWR\uff1a\u200b\u540c\u65f6\u200b\u65ad\u5f00\u200b I/O \u200b\u6d41\u200b\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint shutdown(SOCKET sock, int howto);\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u57df\u540d\u53ca\u7f51\u7edc\u5730\u5740","title":"\u57df\u540d\u200b\u53ca\u200b\u7f51\u7edc\u5730\u5740","text":"<p>\u200b\u5728\u200b\u7f51\u7edc\u200b\u4e2d\u200b\uff0c\u200b\u57df\u540d\u200b\u7cfb\u7edf\u200b(Domain Name System, DNS) \u200b\u5f88\u200b\u91cd\u8981\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b DNS \u200b\u67e5\u8be2\u200b\u57df\u540d\u200b\u7684\u200b IP \u200b\u5730\u5740\u200b\uff0c\u200b\u5982\u6b64\u4e00\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c31\u200b\u4e0d\u200b\u9700\u8981\u200b\u8bb0\u5fc6\u200b\u96be\u4ee5\u200b\u8bb0\u5fc6\u200b\u7684\u200b IP \u200b\u5730\u5740\u200b\u6570\u5b57\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u7262\u8bb0\u200b\u5177\u6709\u200b\u7279\u70b9\u200b\u7684\u200b\u57df\u540d\u200b\u3002\u200b\u5e76\u4e14\u200b\u57df\u540d\u200b\u4e00\u822c\u200b\u662f\u200b\u4e0d\u4f1a\u200b\u6539\u53d8\u200b\uff0c\u200b\u800c\u200b IP \u200b\u5730\u5740\u200b\u662f\u200b\u4f1a\u200b\u7ecf\u5e38\u200b\u53d1\u751f\u200b\u53d8\u52a8\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u6211\u4eec\u200b\u4f9d\u7136\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b DNS \u200b\u67e5\u627e\u200b\u5230\u200b\u6307\u5b9a\u200b\u57df\u540d\u200b\u7684\u200b IP \u200b\u8fdb\u884c\u200b\u8bbf\u95ee\u200b\u3002</p> <p></p> <p>\u200b\u5982\u4e0a\u200b\u662f\u200b DNS \u200b\u7684\u200b\u67e5\u8be2\u200b\u8def\u5f84\u200b\uff0cDNS \u200b\u4f1a\u200b\u6839\u636e\u200b\u57df\u540d\u200b\u4e00\u7ea7\u200b\u4e00\u7ea7\u200b\u5230\u200b\u957f\u5c42\u200b\u7684\u200b DNS \u200b\u670d\u52a1\u5668\u200b\u4e2d\u200b\u67e5\u627e\u200b\u5bf9\u5e94\u200b\u7684\u200b IP \u200b\u5730\u5740\u200b\uff0c\u200b\u5f97\u5230\u200b IP \u200b\u5730\u5740\u200b\u540e\u200b\u5c31\u200b\u539f\u8def\u200b\u8fd4\u56de\u200b\u3002</p> <p>\u200b\u57df\u540d\u200b\u4e0e\u200b IP \u200b\u5730\u5740\u200b\u53ef\u4ee5\u200b\u6309\u952e\u200b\u503c\u200b\u5bf9\u200b\u7684\u200b\u65b9\u5f0f\u200b\u533a\u200b\u7406\u89e3\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u57df\u540d\u200b\u7ed1\u5b9a\u200b\u4e00\u4e2a\u200b IP \u200b\u5730\u5740\u200b\uff0c\u200b\u5f53\u7136\u200b\u57df\u540d\u200b\u53ef\u4ee5\u200b\u7ed1\u5b9a\u200b\u591a\u4e2a\u200b IP \u200b\u5730\u5740\u200b\u3002\u200b\u5728\u200b\u5b9e\u9645\u200b\u7684\u200b\u7a0b\u5e8f\u5f00\u53d1\u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u7528\u200b\u57df\u540d\u200b\u4f1a\u200b\u6bd4\u200b\u4f7f\u7528\u200b IP \u200b\u5730\u5740\u200b\u66f4\u52a0\u200b\u7684\u200b\u7075\u6d3b\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u200b\u9700\u8981\u200b\u4e00\u4e9b\u200b\u51fd\u6570\u8c03\u7528\u200b\u901a\u8fc7\u200b\u57df\u540d\u200b\u83b7\u53d6\u200b IP \u200b\u5730\u5740\u200b\u6216\u200b\u901a\u8fc7\u200b IP \u200b\u5730\u5740\u200b\u83b7\u53d6\u200b\u57df\u540d\u200b\u3002</p> LinuxWindows <pre><code>#include &lt;netdb.h&gt;\n\n// \u200b\u6210\u529f\u200b\u65f6\u200b\u8fd4\u56de\u200b hostent \u200b\u7ed3\u6784\u200b\u4f53\u200b\u5730\u5740\u200b\uff0c\u200b\u5931\u8d25\u200b\u65f6\u200b\u8fd4\u56de\u200b NULL \u200b\u6307\u9488\u200b\nstruct hostent *gethostbyname(const char *hostname);\nstruct hostent *gethostbyaddr(const char *addr, socklen_t len, int family);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u65f6\u200b\u8fd4\u56de\u200b hostent \u200b\u7ed3\u6784\u200b\u4f53\u200b\u5730\u5740\u200b\uff0c\u200b\u5931\u8d25\u200b\u65f6\u200b\u8fd4\u56de\u200b NULL \u200b\u6307\u9488\u200b\nstruct hostent *gethostbyname(const char *hostname);\nstruct hostent *gethostbyaddr(const char *addr, int len, int type);\n</code></pre> <p>\u200b\u8fd4\u56de\u200b\u7684\u200b\u7ed3\u6784\u200b\u4f53\u200b <code>hostent</code> \u200b\u7684\u200b\u5177\u4f53\u200b\u5f62\u5f0f\u200b\u5982\u4e0b\u200b:</p> <pre><code>struct hostent {\n  char *h_name;       // \u200b\u4fdd\u5b58\u200b\u5b98\u65b9\u200b\u57df\u540d\u200b\n  char **h_aliases;   // \u200b\u8bbf\u95ee\u200b\u540c\u4e00\u200b\u4e3b\u9875\u200b\u7684\u200b\u5176\u4ed6\u200b\u57df\u540d\u200b\n  int h_addrtype;     // IP \u200b\u5730\u5740\u200b\u65cf\u200b\u4fe1\u606f\u200b\n  int h_length;       // \u200b\u4fdd\u5b58\u200b IP \u200b\u5730\u5740\u200b\u65cf\u200b\u7684\u200b\u957f\u5ea6\u200b\n  char **h_addr_list; // \u200b\u4ee5\u200b\u6574\u6570\u200b\u5f62\u5f0f\u200b\u4fdd\u5b58\u200b\u57df\u540d\u200b\u5bf9\u5e94\u200b\u7684\u200b IP \u200b\u5730\u5740\u200b\n};\n</code></pre> <p>\u200b\u83b7\u53d6\u200b\u6307\u5b9a\u200b\u57df\u540d\u200b\u7684\u200b IP \u200b\u4fe1\u606f\u200b</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;netdb.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;hostname&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  struct hostent *host = gethostbyname(argv[1]);\n  if (!host) {\n    fprintf(stderr, \"gethostbyname() error\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  printf(\"Official name: %ss \\n\", host-&gt;h_name);\n  for (int i = 0; host-&gt;h_aliases[i]; ++i)\n    printf(\"Aliasers %d: %s\\n\", i+1, host-&gt;h_aliases[i]);\n\n  printf(\"Addresss type: %s\\n\", (host-&gt;h_addrtype == AF_INET) ? \"AF_INET\" : \"AF_INET6\");\n  for (int i = 0; host-&gt;h_addr_list[i]; ++i)\n    printf(\"IP addr %d: %s\\n\", i+1, inet_ntoa(*(struct in_addr*)host-&gt;h_addr_list[i]));\n\n  return 0;\n}\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u591a\u8fdb\u7a0b\u670d\u52a1\u5668\u7aef","title":"\u591a\u200b\u8fdb\u7a0b\u200b\u670d\u52a1\u5668\u7aef","text":"<p>\u200b\u4e4b\u524d\u200b\u7684\u200b TCP \u200b\u670d\u52a1\u5668\u7aef\u200b\u7a0b\u5e8f\u200b\u5728\u200b\u540c\u4e00\u200b\u65f6\u523b\u200b\u53ea\u80fd\u200b\u5904\u7406\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u540c\u65f6\u200b\u5904\u7406\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u8fd9\u200b\u5e76\u200b\u4e0d\u662f\u200b\u6211\u4eec\u200b\u60f3\u8981\u200b\u7684\u200b\u3002\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u7f16\u5199\u200b TCP \u200b\u670d\u52a1\u5668\u7aef\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u8ba9\u200b\u5176\u200b\u5b9e\u73b0\u200b\u5e76\u53d1\u200b\u3002\u200b\u5e76\u53d1\u200b\u670d\u52a1\u5668\u7aef\u200b\u7684\u200b\u5b9e\u73b0\u200b\u6a21\u578b\u200b\u548c\u200b\u65b9\u6cd5\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u4e09\u4e2a\u200b\uff1a</p> <ul> <li>\u200b\u591a\u200b\u8fdb\u7a0b\u200b\u670d\u52a1\u5668\u200b\uff1a\u200b\u901a\u8fc7\u200b\u521b\u5efa\u200b\u591a\u4e2a\u200b\u8fdb\u7a0b\u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b</li> <li>\u200b\u591a\u8def\u590d\u7528\u200b\u670d\u52a1\u5668\u200b\uff1a\u200b\u901a\u8fc7\u200b\u6346\u7ed1\u200b\u5e76\u200b\u7edf\u4e00\u200b\u7ba1\u7406\u200b I/O \u200b\u5bf9\u8c61\u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b</li> <li>\u200b\u591a\u7ebf\u7a0b\u200b\u670d\u52a1\u5668\u200b\uff1a\u200b\u901a\u8fc7\u200b\u751f\u6210\u200b\u4e0e\u200b\u5ba2\u6237\u7aef\u200b\u7b49\u91cf\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b</li> </ul> <p>\u200b\u5173\u4e8e\u200b\u8fdb\u7a0b\u200b\u548c\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u8be6\u7ec6\u200b\u5185\u5bb9\u200b\uff0c\u200b\u8bf7\u200b\u81ea\u884c\u200b\u9605\u8bfb\u200b\u76f8\u5173\u200b\u4e66\u7c4d\u200b\u3002\u200b\u4e0b\u9762\u200b\u901a\u8fc7\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\u591a\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u670d\u52a1\u5668\u7aef\u200b\u7a0b\u5e8f\u200b</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nvoid read_childproc(int sig);\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  int servfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == servfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(servfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind() error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  if (-1 == listen(servfd, 5)) {\n    perror(\"listen() error\");\n    close(servfd);\n    exit(EXIT_FAILURE);\n  }\n\n  struct sigaction act;\n  act.sa_handler = read_childproc;\n  sigemptyset(&amp;act.sa_mask);\n  act.sa_flags = 0;\n  sigaction(SIGCHLD, &amp;act, 0);\n\n  for (int i = 0; i &lt; 5; ++i) {\n    struct sockaddr_in clnt_addr;\n    memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n    int addr_len = sizeof(clnt_addr);\n    int str_len = 0;\n    char message[1024] = {0};\n    int clntfd = accept(servfd, (struct sockaddr *)&amp;clnt_addr, &amp;addr_len);\n    if (-1 == clntfd) {\n      perror(\"accept() error\");\n      continue;\n    } else {\n      puts(\"new client connect...\");\n    }\n\n    pid_t pid = fork();\n    if (-1 == pid) {\n      perror(\"fork() error\");\n      close(clntfd);\n      continue;\n    }\n\n    if (0 == pid) {\n      // \u200b\u56e0\u4e3a\u200bfork\u200b\u4ee5\u540e\u200b\u4f1a\u200b\u5c06\u200b\u7236\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u6240\u6709\u200b\u4e1c\u897f\u200b\u90fd\u200b\u8fdb\u884c\u200b\u4e86\u200b\u590d\u5236\u200b\uff0c\u200b\u5982\u5957\u200b\u63a5\u5b57\u200b\n      // \u200b\u56e0\u6b64\u200b\u5728\u5b50\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u9700\u8981\u200b\u5c06\u200b\u590d\u5236\u200b\u8fc7\u6765\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\u5173\u95ed\u200b\n      close(servfd);\n      while (0 != (str_len = read(clntfd, message, 1024)))\n        write(clntfd, message, str_len);\n\n      close(clntfd);\n      puts(\"client disconnected...\");\n      return 0;\n    } else {\n      close(clntfd);\n    }\n  }\n\n  close(servfd);\n\n  return 0;\n}\n\nvoid read_childproc(int sig) {\n  pid_t pid;\n  int status;\n  pid = waitpid(-1, &amp;status, WNOHANG);\n  printf(\"remove proc id: %d \\n\", pid);\n}\n</code></pre> <p>\u200b\u5ba2\u6237\u7aef\u200b I/O \u200b\u5206\u5272\u200b</p> <p>\u200b\u5728\u200b\u4e4b\u524d\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u4e2d\u200b\uff0c\u200b\u53d1\u9001\u6570\u636e\u200b\u548c\u200b\u63a5\u6536\u6570\u636e\u200b\u662f\u200b\u5199\u200b\u5728\u200b\u4e00\u5207\u200b\u7684\u200b\uff0c\u200b\u4e00\u822c\u200b\u90fd\u200b\u662f\u200b\u5728\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u9001\u200b\u5b8c\u200b\u6570\u636e\u200b\u540e\u200b\uff0c\u200b\u7b49\u5f85\u200b\u670d\u52a1\u5668\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\u63a5\u6536\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u7b49\u5f85\u200b\u5728\u200b\u4e00\u5b9a\u200b\u7a0b\u5ea6\u200b\u4e0a\u200b\u662f\u200b\u4e00\u79cd\u200b\u6d6a\u8d39\u200b\u3002\u200b\u4e3a\u4e86\u200b\u63d0\u9ad8\u6548\u7387\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u53d1\u9001\u6570\u636e\u200b\u548c\u200b\u63a5\u6536\u6570\u636e\u200b\u5206\u522b\u200b\u653e\u5728\u200b\u4e24\u4e2a\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u7236\u200b\u8fdb\u7a0b\u200b\u8d1f\u8d23\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u8d1f\u8d23\u200b\u63a5\u6536\u6570\u636e\u200b\uff0c\u200b\u4e24\u4e2a\u200b\u4e92\u8865\u200b\u5e72\u6270\u200b\uff0c\u200b\u5176\u200b\u6a21\u578b\u200b\u548c\u200b\u6570\u636e\u4ea4\u6362\u200b\u65b9\u5f0f\u200b\u5982\u4e0b\u200b</p> <p></p> <p>\u200b\u5177\u4f53\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u5982\u4e0b\u200b:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nvoid read_routine(int sock, char *buf);\nvoid write_routine(int sock, char *buf);\n\nint main(int argc, char *argv[]) {\n  if (3 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;ip&gt; &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int clntfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == clntfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u53d1\u9001\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  clnt_addr.sin_family = AF_INET;\n  clnt_addr.sin_addr.s_addr = inet_addr(argv[1]);\n  clnt_addr.sin_port = htons(atoi(argv[2]));\n  if (-1 == connect(clntfd, (struct sockaddr *)&amp;clnt_addr, sizeof(clnt_addr))) {\n    perror(\"connect() error\");\n    close(clntfd);\n    exit(EXIT_FAILURE);\n  } else {\n    printf(\"Connected ......\\n\");\n  }\n\n  pid_t pid = fork();\n  if (-1 == pid) {\n    perror(\"fork() error\");\n    close(clntfd);\n    exit(EXIT_FAILURE);\n  }\n\n  char message[1024] = {0};\n  if (0 == pid)\n    write_routine(clntfd, message);\n  else\n    read_routine(clntfd, message);\n\n  close(clntfd);\n\n  return 0;\n}\n\nvoid read_routine(int sock, char *buf) {\n  while(1) {\n    int str_len = read(sock, buf, 1024);\n    if (0 == str_len)\n      return;\n\n    printf(\"message from server: %s\\n\", buf);\n  }\n}\n\nvoid write_routine(int sock, char *buf) {\n  while (1) {\n    printf(\"Input message(Q/q to quit): \");\n    fgets(buf, 1024, stdin);\n    if (!strcmp(buf, \"q\\n\") || !strcmp(buf, \"Q\\n\")) {\n      shutdown(sock, SHUT_WR);\n      return;\n    }\n    write(sock, buf, sizeof(buf));\n  }\n}\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#io-\u590d\u7528","title":"I/O \u200b\u590d\u7528","text":"<p>\u200b\u591a\u200b\u8fdb\u7a0b\u200b\u670d\u52a1\u5668\u200b\u5e76\u53d1\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u540c\u65f6\u200b\u5904\u7406\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u9700\u6c42\u200b\uff0c\u200b\u4f46\u662f\u200b\u521b\u5efa\u200b\u8fdb\u7a0b\u200b\u9700\u8981\u200b\u4ed8\u51fa\u200b\u6781\u5927\u200b\u7684\u200b\u4ee3\u4ef7\u200b\uff0c\u200b\u9700\u8981\u200b\u5927\u91cf\u200b\u7684\u200b\u8fd0\u7b97\u200b\u7a7a\u95f4\u200b\u548c\u200b\u5185\u5b58\u7a7a\u95f4\u200b\uff0c\u200b\u7531\u4e8e\u200b\u6bcf\u4e2a\u200b\u8fdb\u7a0b\u200b\u90fd\u200b\u5177\u6709\u200b\u72ec\u7acb\u200b\u7684\u200b\u5185\u5b58\u7a7a\u95f4\u200b\uff0c\u200b\u6240\u4ee5\u200b\u76f8\u4e92\u95f4\u200b\u7684\u200b\u6570\u636e\u4ea4\u6362\u200b\u4e5f\u200b\u8981\u6c42\u200b\u91c7\u7528\u200b\u76f8\u5bf9\u200b\u590d\u6742\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002\u200b\u90a3\u4e48\u200b\u6709\u6ca1\u6709\u200b\u5728\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u540c\u65f6\u200b\u5904\u7406\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6280\u672f\u200b \u2014\u2014 I/O \u200b\u590d\u7528\u200b\u3002</p> <p></p> <p>I/O \u200b\u590d\u7528\u200b\u4f7f\u7528\u200b <code>select</code> \u200b\u51fd\u6570\u200b\u6765\u200b\u5b8c\u6210\u200b\uff0c\u200b\u51fd\u6570\u8c03\u7528\u200b\u7684\u200b\u57fa\u672c\u200b\u8fc7\u7a0b\u200b\u5982\u4e0b\u200b\uff1a</p> <ol> <li>\u200b\u6b65\u9aa4\u200b\u4e00\u200b\uff1a\u200b\u8bbe\u7f6e\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u3001\u200b\u6307\u5b9a\u200b\u76d1\u89c6\u200b\u8303\u56f4\u200b\u3001\u200b\u8bbe\u7f6e\u200b\u8d85\u65f6\u200b</li> <li>\u200b\u6b65\u9aa4\u200b\u4e8c\u200b\uff1a\u200b\u8c03\u7528\u200b <code>select</code> \u200b\u51fd\u6570\u200b</li> <li>\u200b\u6b65\u9aa4\u200b\u4e09\u200b\uff1a\u200b\u67e5\u770b\u200b\u8c03\u7528\u200b\u7ed3\u679c\u200b</li> </ol> <pre><code>// I/O \u200b\u590d\u7528\u200b\u4ee3\u7801\u200b\u7684\u200b\u57fa\u672c\u200b\u6846\u67b6\u200b\nfd_set &lt;\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u96c6\u5408\u200b&gt;\nFD_SET(0/1, \u200b\u4e0a\u9762\u200b\u7684\u200b\u96c6\u5408\u200b\u5730\u5740\u200b);\n// \u200b\u6216\u200b FD_SET(0/1, \u200b\u4e0a\u9762\u200b\u7684\u200b\u96c6\u5408\u200b\u5730\u5740\u200b);\n// \u200b\u6216\u200b FD_SET(0/1, \u200b\u4e0a\u9762\u200b\u7684\u200b\u96c6\u5408\u200b\u5730\u5740\u200b);\n// \u200b\u6216\u200b FD_SET(0/1, \u200b\u4e0a\u9762\u200b\u7684\u200b\u96c6\u5408\u200b\u5730\u5740\u200b);\n\n// \u200b\u8d85\u65f6\u200b\u4e86\u200b\u5c31\u200b\u76f4\u63a5\u200b\u9000\u51fa\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u53d1\u751f\u200b\u9519\u8bef\u200b\u8fd4\u56de\u200b -1\uff0c\u200b\u5927\u4e8e\u200b 0 \u200b\u662f\u200b\u53d1\u751f\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u4e2a\u6570\u200b\n// \u200b\u7531\u4e8e\u200b\u8c03\u7528\u200b select \u200b\u540e\u200b\uff0c\u200b\u9664\u200b\u53d1\u751f\u53d8\u5316\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u5916\u200b\uff0c\u200b\u5176\u4f59\u200b\u4f4d\u7f6e\u200b\u90fd\u200b\u4f1a\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\u4e3a\u200b 0\uff0c\u200b\u56e0\u6b64\u200b\u4e3a\u4e86\u200b\u8bb0\u4f4f\u200b\u521d\u59cb\u503c\u200b\uff0c\u200b\u90fd\u200b\u4f1a\u200b\u5bf9\u200b\u5176\u8fdb\u200b\u8fdb\u884c\u200b\u590d\u5236\u200b\nint ret = select(\u200b\u5f53\u524d\u200b\u6700\u5927\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b, \u200b\u53ef\u8bfb\u200b\u7684\u200b\u96c6\u5408\u200b\uff0c\u200b\u53ef\u5199\u200b\u7684\u200b\u96c6\u5408\u200b\uff0c\u200b\u51fa\u9519\u200b\u7684\u200b\u96c6\u5408\u200b\uff0c\u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b);\n</code></pre> <p>Windows \u200b\u4e2d\u200b\u867d\u7136\u200b\u51fd\u6570\u200b\u63a5\u53e3\u200b\u7684\u200b\u7ec6\u8282\u200b\u4e0e\u200b Linux \u200b\u4e2d\u200b\u7684\u200b\u4e0d\u540c\u200b\uff0c\u200b\u4f46\u662f\u200b\u6574\u4f53\u200b\u7684\u200b\u4f7f\u7528\u200b\u6b65\u9aa4\u200b\u57fa\u672c\u76f8\u540c\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b I/O \u200b\u590d\u7528\u200b\u5b9e\u73b0\u200b\u670d\u52a1\u5668\u7aef\u200b\uff1a</p> LinuxWindows <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/select.h&gt;\n#include &lt;sys/time.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == sockfd) {\n    perror(\"socket() error\");\n    exit(EXIT_FAILURE);\n  }\n\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(sockfd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind() error\");\n    close(sockfd);\n    exit(EXIT_FAILURE);\n  }\n\n  if (-1 == listen(sockfd, 5)) {\n    perror(\"listen() error\");\n    close(sockfd);\n    exit(EXIT_FAILURE);\n  }\n\n  // \u200b\u521b\u5efa\u200b\u4e24\u4e2a\u200b\u96c6\u5408\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u7528\u6765\u200b\u4fdd\u5b58\u200b\u521d\u59cb\u503c\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u7528\u6765\u200b\u8bbe\u7f6e\u200b\n  fd_set read_set, tmp_set;\n  FD_ZERO(&amp;read_set);\n  FD_SET(sockfd, &amp;read_set);\n  int maxfd = sockfd; // \u200b\u4fdd\u5b58\u200b\u5f53\u524d\u200b\u6700\u5927\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\n  struct timeval timeout;\n  struct sockaddr_in clnt_addr;\n  memset(&amp;clnt_addr, 0, sizeof(clnt_addr));\n  socklen_t clnt_len = sizeof(clnt_addr);\n  while (1) {\n    tmp_set = read_set; // \u200b\u590d\u5236\u200b\u4e00\u4efd\u200b\n    timeout.tv_sec = 5;\n    timeout.tv_usec = 50000;\n    int ret = select(maxfd+1, &amp;tmp_set, NULL, NULL, &amp;timeout);\n    if (-1 == ret)\n      break;\n    else if (0 == ret)\n      continue;\n\n    for (int i = 0; i &lt; maxfd+1; ++i) {\n      // \u200b\u5982\u679c\u200b\u8fd9\u4e2a\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\uff0c\u200b\u5e76\u4e14\u200b\u7b49\u4e8e\u200b\u4e0a\u9762\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u5219\u200b\u8fdb\u884c\u200b\u53d7\u7406\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\u5e76\u200b\u66f4\u65b0\u200b\u6700\u5927\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\n      // \u200b\u5982\u679c\u200b\u4e0d\u200b\u7b49\u4e8e\u200b\u4e0a\u9762\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u5219\u200b\u8fdb\u884c\u200b\u53d1\u9001\u200b\u548c\u200b\u63a5\u6536\u6570\u636e\u200b\u7684\u200b\u64cd\u4f5c\u200b\n      if (FD_ISSET(i, &amp;tmp_set)) {\n        if (i == sockfd) {\n          int clntfd = accept(sockfd, (struct sockaddr *)&amp;clnt_addr, &amp;clnt_len);\n          if (-1 == clntfd) {\n            perror(\"accept() error\");\n            close(sockfd);\n            exit(EXIT_FAILURE);\n          } else {\n            printf(\"Connected clinet: %d\\n\", clntfd);\n          }\n\n          FD_SET(clntfd, &amp;read_set);\n          if (clntfd &gt; maxfd)\n            maxfd = clntfd;\n        } else {\n          char message[1024] = {0};\n          int str_len = 0;\n          str_len = read(i, message, 1024);\n          if (0 == str_len) {\n            FD_CLR(i, &amp;read_set);\n            close(i);\n            printf(\"closed client: %d\\n\", i);\n          } else {\n            write(i, message, str_len);\n          }\n        }\n      }\n    }\n  }\n  close(sockfd);\n\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;WinSock2.h&gt;\n\n#define WAITSIZE 5\n#define BUFFERSIZE 1024\n\nvoid error_handling(const char *msg);\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  WSADATA wsa_data;\n  WSAStartup(MAKEWORD(2, 2), &amp;wsa_data);\n\n  SOCKET serv_sock = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == serv_sock)\n    error_handling(\"socket error\");\n\n  struct sockaddr_in serv_addr;\n  memset(&amp;serv_addr, 0, sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(serv_sock, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr)))\n    error_handling(\"bind error\");\n\n  if (-1 == listen(serv_sock, WAITSIZE))\n    error_handling(\"listen error\");\n\n  // \u200b\u521b\u5efa\u200b\u4e24\u4e2a\u200b\u96c6\u5408\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u7528\u6765\u200b\u4fdd\u5b58\u200b\u521d\u59cb\u503c\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u7528\u6765\u200b\u8bbe\u7f6e\u200b\n  fd_set read_set, tmp_set;\n  FD_ZERO(&amp;read_set);\n  FD_SET(serv_sock, &amp;read_set);\n  int maxfd = serv_sock; // \u200b\u4fdd\u5b58\u200b\u5f53\u524d\u200b\u6700\u5927\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\n  struct timeval timeout;\n  struct sockaddr_in clnt_addr;\n  int addrlen = sizeof(clnt_addr);\n  while (1) {\n    tmp_set = read_set; // \u200b\u590d\u5236\u200b\u4e00\u4efd\u200b\n    timeout.tv_sec = 5;\n    timeout.tv_usec = 50000;\n    int ret = select(maxfd+1, &amp;tmp_set, NULL, NULL, &amp;timeout);\n    if (-1 == ret)\n      break;\n    else if (0 == ret)\n      continue;\n\n    for (int i = 0; i &lt; maxfd+1; ++i) {\n      // \u200b\u5982\u679c\u200b\u8fd9\u4e2a\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\uff0c\u200b\u5e76\u4e14\u200b\u7b49\u4e8e\u200b\u4e0a\u9762\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u5219\u200b\u8fdb\u884c\u200b\u53d7\u7406\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\u5e76\u200b\u66f4\u65b0\u200b\u6700\u5927\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\n      // \u200b\u5982\u679c\u200b\u4e0d\u200b\u7b49\u4e8e\u200b\u4e0a\u9762\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u5219\u200b\u8fdb\u884c\u200b\u53d1\u9001\u200b\u548c\u200b\u63a5\u6536\u6570\u636e\u200b\u7684\u200b\u64cd\u4f5c\u200b\n      if (FD_ISSET(i, &amp;tmp_set)) {\n        if (i == serv_sock) {\n          int clnt_sock = accept(serv_sock, (struct sockaddr *)&amp;clnt_addr, &amp;addrlen);\n          if (-1 == clnt_sock) {\n            perror(\"accept() error\");\n            closesocket(serv_sock);\n            exit(EXIT_FAILURE);\n          } else {\n            printf(\"Connected clinet: %d\\n\", clnt_sock);\n          }\n\n          FD_SET(clnt_sock, &amp;read_set);\n          if (clnt_sock &gt; maxfd)\n            maxfd = clnt_sock;\n        } else {\n          char message[1024] = {0};\n          int str_len = 0;\n          str_len = recv(i, message, 1024, 0);\n          if (0 == str_len) {\n            FD_CLR(i, &amp;read_set);\n            closesocket(i);\n            printf(\"closed client: %d\\n\", i);\n          } else {\n            send(i, message, str_len, 0);\n          }\n        }\n      }\n    }\n  }\n  closesocket(serv_sock);\n  WSACleanup();\n  return 0;\n}\n\nvoid error_handling(const char *msg) {\n  fputs(msg, stderr);\n  fputc('\\n', stderr);\n  exit(EXIT_FAILURE);\n}\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u4f18\u4e8e-select-\u7684-epoll","title":"\u4f18\u4e8e\u200b <code>select</code> \u200b\u7684\u200b <code>epoll</code>","text":""}]}