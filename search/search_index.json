{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"\u4e3b\u9875","text":"<p>\u200b\u672c\u200b\u7f51\u7ad9\u200b\u4e3a\u200b xjjeffery \u200b\u4e2a\u4eba\u200b\u5b66\u4e60\u200b\u5de5\u4f5c\u200b\u7684\u200b\u603b\u7ed3\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u5b66\u4e60\u200b\u548c\u200b\u5de5\u4f5c\u200b\u4e2d\u200b\u9047\u5230\u200b\u7684\u200b\u5404\u79cd\u200b\u95ee\u9898\u200b\u548c\u200b\u76f8\u5173\u200b\u6280\u672f\u200b\u7684\u200b\u7814\u7a76\u200b\uff0c\u200b\u6b22\u8fce\u200b\u5927\u5bb6\u200b\u9605\u8bfb\u200b\u5b66\u4e60\u200b\u5e76\u200b\u4ea4\u6d41\u200b\u3002</p>"},{"location":"0voice/2204_cpp/network/01_network_io.html","title":"\u7f51\u7edc\u200b I/O","text":"<p>\u200b\u7f51\u7edc\u200b\u662f\u200b\u540e\u200b\u7aef\u200b\u5f00\u53d1\u200b\u7684\u200b\u91cd\u8981\u73af\u8282\u200b\uff0c\u200b\u5404\u79cd\u200b\u4f7f\u7528\u200b\u573a\u666f\u200b\u7684\u200b\u5e95\u5c42\u200b\u7f51\u7edc\u200b\u662f\u200b\u600e\u4e48\u200b\u505a\u200b\u7684\u200b\uff0c\u200b\u5982\u200b\uff1a</p> <ul> <li>\u200b\u5fae\u4fe1\u200b\u804a\u5929\u200b\u65f6\u200b\uff0c\u200b\u8bed\u97f3\u200b\u3001\u200b\u6587\u5b57\u200b\u3001\u200b\u89c6\u9891\u200b\u7b49\u200b\u53d1\u9001\u200b\u4e0e\u200b\u7f51\u7edc\u200b I/O \u200b\u6709\u200b\u4ec0\u4e48\u200b\u5173\u7cfb\u200b</li> <li>\u200b\u5237\u200b\u77ed\u200b\u89c6\u9891\u200b\u65f6\u200b\uff0c\u200b\u89c6\u9891\u200b\u662f\u200b\u5982\u4f55\u200b\u5448\u73b0\u200b\u5728\u200b\u4f60\u200b\u7684\u200b app \u200b\u4e0a\u200b\u7684\u200b</li> <li>github/gitlab, git clone\uff0c \u200b\u4e3a\u4ec0\u4e48\u200b\u80fd\u591f\u200b\u5230\u8fbe\u200b\u672c\u5730\u200b</li> <li>\u200b\u4f7f\u7528\u200b\u5171\u4eab\u200b\u8bbe\u5907\u200b\u65f6\u200b\uff0c\u200b\u626b\u63cf\u200b\u4ee5\u540e\u200b\uff0c\u200b\u8bbe\u5907\u200b\u662f\u200b\u5982\u4f55\u200b\u5f00\u9501\u200b\u7684\u200b</li> <li>\u200b\u5bb6\u91cc\u200b\u7684\u200b\u7535\u5b50\u8bbe\u5907\u200b\u662f\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200b\u624b\u673a\u200b app \u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b</li> <li>...</li> </ul> <p>\u200b\u4e0a\u8ff0\u200b\u7684\u200b\u573a\u666f\u200b\u90fd\u200b\u662f\u200b\u7528\u200b\u7f51\u7edc\u200b\u89e3\u51b3\u95ee\u9898\u200b\uff0c\u200b\u800c\u200b\u8fd9\u4e9b\u200b\u573a\u666f\u200b\u90fd\u200b\u4f1a\u200b\u7528\u5230\u200b\u670d\u52a1\u5668\u200b\u548c\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u5ba2\u6237\u7aef\u200b\u548c\u200b\u670d\u52a1\u7aef\u200b\u8981\u200b\u4e4b\u95f4\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8fde\u63a5\u200b\u76f8\u5f53\u4e8e\u200b\u6c34\u7ba1\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u8fde\u63a5\u200b\u6e20\u9053\u200b\u53d1\u9001\u200b\u4ec0\u4e48\u200b\u5185\u5bb9\u200b\u4e0d\u200b\u9700\u8981\u200b\u6211\u4eec\u200b\u5173\u6ce8\u200b\uff0c\u200b\u6211\u200b\u9700\u8981\u200b\u5173\u6ce8\u200b\u5982\u4f55\u200b\u5efa\u7acb\u200b\u8fd9\u4e2a\u200b\u8fde\u63a5\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u53d1\u9001\u200b\u548c\u200b\u63a5\u6536\u6570\u636e\u200b\u3002</p> <p>\u200b\u9996\u5148\u200b\u6765\u770b\u200b\u4e00\u4e0b\u200b tcp \u200b\u670d\u52a1\u7aef\u200b\u7684\u200b\u7a0b\u5e8f\u4ee3\u7801\u200b\uff0c\u200b\u5177\u4f53\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;netinet/in.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int sock_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == sock_fd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u672c\u5730\u200b\u7aef\u53e3\u200b\n  struct sockaddr_in serv_addr;\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u51b2\u7a81\u200b\u4f1a\u200b\u7ed1\u5b9a\u200b\u5931\u8d25\u200b\n  if (-1 == bind(sock_fd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u5c06\u200b\u670d\u52a1\u7aef\u200b\u7684\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\u6253\u5f00\u200b\n  if (-1 == listen(sock_fd, 10)) {\n    perror(\"listen error\");\n    exit(EXIT_FAILURE);\n  }\n\n  getchar();\n\n  return 0;\n}\n</code></pre> <p>\u200b\u7f16\u8bd1\u200b\u8fd0\u884c\u200b\u6b64\u200b\u7a0b\u5e8f\u200b\u4ee5\u540e\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>netstat -anop |grep 9090</code> \u200b\u67e5\u770b\u200b\u6307\u5b9a\u200b\u7aef\u53e3\u200b\u7684\u200b\u7f51\u7edc\u200b\u72b6\u6001\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u6b64\u65f6\u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u53ef\u4ee5\u200b\u6b63\u5e38\u200b\u542f\u52a8\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u6b64\u65f6\u200b\u518d\u200b\u5c06\u200b\u6b64\u200b\u7a0b\u5e8f\u200b\u4ee5\u200b\u76f8\u540c\u200b\u7684\u200b IP \u200b\u548c\u200b\u7aef\u53e3\u200b\u542f\u52a8\u200b\uff0c\u200b\u5219\u200b\u51fa\u73b0\u200b\u9519\u8bef\u200b\uff0c\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u7aef\u53e3\u200b\u5df2\u200b\u88ab\u200b\u5360\u7528\u200b\uff0c\u200b\u4e00\u4e2a\u200b IP \u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7aef\u53e3\u200b\u53ea\u80fd\u200b\u88ab\u200b\u4e00\u4e2a\u200b\u7a0b\u5e8f\u200b\u6240\u200b\u5360\u7528\u200b\uff0c\u200b\u5c31\u200b\u8ddf\u200b\u5750\u8f66\u200b\u4e00\u6837\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u5ea7\u4f4d\u200b\u53ea\u80fd\u200b\u5750\u200b\u4e00\u4e2a\u200b\u4eba\u200b\u3002</p> <p></p> <p>\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4e86\u200b <code>listen</code> \u200b\u610f\u5473\u7740\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u8fde\u63a5\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u5ba2\u6237\u7aef\u200b\u53ef\u4ee5\u200b\u8fde\u63a5\u200b\u5230\u200b\u6b64\u200b\u670d\u52a1\u7aef\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u7f51\u7edc\u200b\u52a9\u624b\u200b\u5de5\u5177\u200b\u8fdb\u884c\u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u6b64\u65f6\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u4ee5\u200b\u8fde\u63a5\u200b\u6210\u529f\u200b\uff0c\u200b\u540c\u6837\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>netstat</code> \u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\u7f51\u7edc\u200b\u72b6\u6001\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53d1\u73b0\u200b\u5df2\u7ecf\u200b\u6709\u200b\u4e24\u6761\u200b\u4fe1\u606f\u200b\u3002\u200b\u8fd9\u200b\u6bcf\u200b\u4e00\u6761\u200b\u4fe1\u606f\u200b\u90fd\u200b\u4f1a\u200b\u4e0e\u200b\u4e00\u4e2a\u200b fd \u200b\u7ed1\u5b9a\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u5ba2\u6237\u7aef\u200b\u4e0e\u200b fd \u200b\u662f\u200b\u4e00\u4e00\u5bf9\u5e94\u200b\u7684\u200b\uff0c\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u5c31\u200b\u4f1a\u200b\u6709\u200b\u591a\u4e2a\u200b fd\uff0c\u200b\u4e5f\u200b\u5c31\u200b\u4f1a\u200b\u6709\u200b\u591a\u6761\u200b\u4fe1\u606f\u200b\u3002</p> <p></p> <p>\u200b\u4f46\u662f\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u200b\u8c03\u8bd5\u200b\u52a9\u624b\u200b\u5de5\u5177\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u5728\u200b\u670d\u52a1\u7aef\u200b\u5e76\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u53cd\u5e94\u200b\u662f\u200b\u539f\u56e0\u200b\uff1f\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u7b80\u5355\u200b\u7684\u200b\u7406\u89e3\u200b\uff1a<code>listen</code> \u200b\u51fd\u6570\u200b\u7684\u200b\u4f7f\u7528\u200b\u5c31\u200b\u76f8\u5f53\u4e8e\u200b\u5728\u200b A \u200b\u5e02\u5efa\u200b\u4e86\u200b\u4e00\u6761\u200b\u9ad8\u901f\u516c\u8def\u200b\u548c\u200b\u6536\u8d39\u7ad9\u200b\uff0c\u200b\u4f46\u662f\u200b\u6b64\u200b\u6536\u8d39\u7ad9\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u6b63\u5f0f\u200b\u8425\u4e1a\u200b\uff0c\u200b\u5904\u4e8e\u200b\u5c01\u95ed\u200b\u72b6\u6001\u200b\uff0c\u200b\u6b64\u65f6\u200b\u5c31\u7b97\u200b\u8f66\u5b50\u200b\u5f00\u6765\u200b\u4e5f\u200b\u65e0\u6cd5\u200b\u8fdb\u5165\u200b\u8fd9\u4e2a\u200b\u57ce\u5e02\u200b\u3002\u200b\u90a3\u4e48\u200b\u5728\u200b\u4e0a\u8ff0\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u4e5f\u200b\u662f\u200b\u7c7b\u4f3c\u200b\uff0c<code>listen</code> \u200b\u53ea\u662f\u200b\u5141\u8bb8\u200b\u5ba2\u6237\u7aef\u200b\u8ddf\u200b\u6211\u200b\u7684\u200b\u8fde\u63a5\u200b\uff0c\u200b\u4f46\u662f\u200b\u670d\u52a1\u7aef\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u5f00\u901a\u200b\u63a5\u6536\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\u53d1\u9001\u200b\uff0c\u200b\u5c31\u7b97\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u4e86\u200b\u4e5f\u200b\u6ca1\u6709\u200b\u7528\u200b\u3002\u200b\u7b80\u5355\u200b\u7684\u200b\u8bf4\u200b\uff0c\u200b\u6b64\u65f6\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u5c06\u200b fd \u200b\u4e0e\u200b\u5ba2\u6237\u7aef\u200b\u7ed1\u5b9a\u200b\u3002</p> <p>\u200b\u5c06\u200b fd \u200b\u4e0e\u200b\u5ba2\u6237\u7aef\u200b\u7ed1\u5b9a\u200b\uff0c\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b <code>accept</code> \u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u4e14\u200b\u9700\u8981\u200b\u8bb0\u5f55\u200b\u8fd9\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4e4b\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u4fe1\u606f\u200b\u8bfb\u53d6\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u6765\u200b\u7684\u200b\u6570\u636e\u200b\u3002\u200b\u8fd9\u200b\u5c31\u200b\u8ddf\u200b\u6536\u8d39\u7ad9\u200b\u6b63\u5f0f\u200b\u8425\u4e1a\u200b\u4ee5\u540e\u200b\uff0c\u200b\u8f66\u8f86\u200b\u901a\u8fc7\u200b\u6536\u8d39\u7ad9\u200b\u4e5f\u200b\u9700\u8981\u200b\u8bb0\u5f55\u200b\u8f66\u8f86\u200b\u4fe1\u606f\u200b\u4e00\u4e2a\u200b\u9053\u7406\u200b\u3002\u200b\u65b0\u200b\u7684\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;netinet/in.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\n#define BUFFERSIZE 1024\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int sock_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == sock_fd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u672c\u5730\u200b\u7aef\u53e3\u200b\n  struct sockaddr_in serv_addr;\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u51b2\u7a81\u200b\u4f1a\u200b\u7ed1\u5b9a\u200b\u5931\u8d25\u200b\n  if (-1 == bind(sock_fd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. listen \u200b\u6253\u5f00\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  if (-1 == listen(sock_fd, 10)) {\n    perror(\"listen error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 4. \u200b\u83b7\u53d6\u200b\u4e0e\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8054\u7cfb\u200b\n  struct sockaddr_in clnt_addr;\n  socklen_t len = sizeof(clnt_addr);\n  int clnt_fd = accept(sock_fd, (struct sockaddr *)&amp;clnt_addr, &amp;len);\n  if (-1 == clnt_fd) {\n    perror(\"accept error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 5. \u200b\u53d6\u51fa\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u6765\u200b\u7684\u200b\u6570\u636e\u200b\n  char buffer[BUFFERSIZE] = {0};\n  if (-1 != recv(clnt_fd, buffer, BUFFERSIZE, 0)) {\n    printf(\"RECV: %s\\n\", buffer);\n  } else {\n    perror(\"recv error\");\n    exit(EXIT_FAILURE);\n  }\n\n  getchar();\n\n  return 0;\n}\n</code></pre> <p>\u200b\u5141\u8bb8\u200b\u6b64\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u200b\u52a9\u624b\u200b\u5de5\u5177\u200b\u8fde\u63a5\u200b\u5230\u200b\u6b64\u200b\u670d\u52a1\u5668\u200b\u540e\u200b\uff0c\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u670d\u52a1\u5668\u200b\u4e5f\u200b\u80fd\u200b\u6709\u6240\u200b\u54cd\u5e94\u200b\u3002</p> <p></p> <p>\u200b\u73b0\u5728\u200b\u6709\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u8fde\u63a5\u200b\u5230\u200b\u8fd9\u4e2a\u200b\u670d\u52a1\u7aef\u200b\u8be5\u200b\u5982\u4f55\u200b\u505a\u200b\uff1f\u200b\u524d\u9762\u200b\u4e5f\u200b\u8bf4\u200b\u8fc7\u200b\u5ba2\u6237\u7aef\u200b\u4e0e\u200b fd \u200b\u662f\u200b\u4e00\u4e00\u5bf9\u5e94\u200b\u7684\u200b\uff0c\u200b\u800c\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b fd\uff0c\u200b\u8fd9\u91cc\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\uff0c\u200b\u4ece\u200b\u7406\u8bba\u200b\u4e0a\u200b\u6765\u8bb2\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u4e0e\u200b fd \u200b\u7684\u200b\u4e00\u4e00\u5bf9\u5e94\u200b\uff0c\u200b\u662f\u5426\u200b\u53ef\u884c\u200b\u901a\u8fc7\u200b\u4e0b\u9762\u200b\u7684\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u60c5\u51b5\u200b\u6765\u200b\u5224\u65ad\u200b</p> <pre><code>#include &lt;netinet/in.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\n#define BUFFERSIZE 1024\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int sock_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == sock_fd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u672c\u5730\u200b\u7aef\u53e3\u200b\n  struct sockaddr_in serv_addr;\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u51b2\u7a81\u200b\u4f1a\u200b\u7ed1\u5b9a\u200b\u5931\u8d25\u200b\n  if (-1 == bind(sock_fd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. listen \u200b\u6253\u5f00\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  if (-1 == listen(sock_fd, 10)) {\n    perror(\"listen error\");\n    exit(EXIT_FAILURE);\n  }\n\n  while (1) {\n    // 4. \u200b\u83b7\u53d6\u200b\u4e0e\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8054\u7cfb\u200b\n    struct sockaddr_in clnt_addr;\n    socklen_t len = sizeof(clnt_addr);\n    int clnt_fd = accept(sock_fd, (struct sockaddr *)&amp;clnt_addr, &amp;len);\n    if (-1 == clnt_fd) {\n      perror(\"accept error\");\n      exit(EXIT_FAILURE);\n    }\n\n    // 5. \u200b\u53d6\u51fa\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u6765\u200b\u7684\u200b\u6570\u636e\u200b\n    char buffer[BUFFERSIZE] = {0};\n    if (-1 != recv(clnt_fd, buffer, BUFFERSIZE, 0)) {\n      printf(\"RECV: %s\\n\", buffer);\n    } else {\n      perror(\"recv error\");\n      exit(EXIT_FAILURE);\n    }\n  }\n\n  getchar();\n\n  return 0;\n}\n</code></pre> <p>\u200b\u6b64\u65f6\u200b\u4f9d\u6b21\u200b\u6309\u200b\u987a\u5e8f\u200b\u542f\u52a8\u200b\u591a\u4e2a\u200b\u7f51\u7edc\u200b\u52a9\u624b\u200b\u5de5\u5177\u200b\uff0c\u200b\u8fde\u63a5\u200b\u5230\u200b\u670d\u52a1\u5668\u200b\uff0c\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\u90fd\u200b\u662f\u200b\u6b63\u786e\u200b\u7684\u200b\u3002\u200b\u4f46\u662f\u200b\u8fd9\u4e2a\u200b\u7a0b\u5e8f\u200b\u8fd8\u662f\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u5927\u200b\u95ee\u9898\u200b\uff0c\u200b\u5c31\u662f\u200b\u6211\u4eec\u200b\u4e0d\u200b\u6309\u200b\u987a\u5e8f\u200b\u8fde\u63a5\u200b\u7684\u200b\u987a\u5e8f\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u800c\u662f\u200b\u987a\u4fbf\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u6570\u636e\u200b\u53ef\u80fd\u200b\u53d1\u200b\u4e0d\u200b\u51fa\u53bb\u200b\uff0c\u200b\u8fd9\u662f\u200b\u4ec0\u4e48\u200b\u539f\u56e0\u200b\u3002</p> <pre><code>flowchart TD\n  A[socket] --&gt; B[bind]\n  B[bind] --&gt; C[accept]\n  C[accept] --&gt; D[recv]\n  D[recv] --&gt; |Yes| E[printf]\n  E[printf] -- \u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b--&gt; C[accept]\n  D[recv] --&gt; F[recturn]</code></pre> <p>\u200b\u5982\u200b\u4e0a\u8ff0\u200b\u7684\u200b\u6d41\u7a0b\u56fe\u200b\u6240\u793a\u200b\uff0c\u200b\u51fa\u73b0\u200b\u6570\u636e\u200b\u53d1\u9001\u200b\u4e0d\u200b\u51fa\u53bb\u200b\u7684\u200b\u539f\u56e0\u200b\u662f\u56e0\u4e3a\u200b\u4ee3\u7801\u200b\u903b\u8f91\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u5f53\u200b\u7a0b\u5e8f\u200b\u542f\u52a8\u200b\u540e\u200b\uff0c\u200b\u6b64\u65f6\u200b\u7a0b\u5e8f\u200b\u5c31\u200b\u5230\u200b\u4e86\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u7684\u200b <code>accept</code> \u200b\u8fd9\u91cc\u200b\uff0c\u200b\u7b49\u5f85\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\uff0c\u200b\u4e00\u65e6\u200b\u7b2c\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u8fde\u63a5\u200b\u6210\u529f\u200b\u540e\u200b\uff0c\u200b\u4ee3\u7801\u200b\u5c31\u200b\u5230\u200b\u4e86\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u7684\u200b <code>recv</code> \u200b\u8fd9\u91cc\u200b\u3002\u200b\u7136\u800c\u200b\u6b64\u65f6\u200b\u6211\u4eec\u200b\u53c8\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5176\u4ed6\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u8fde\u63a5\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4f7f\u7528\u200b\u5176\u4ed6\u200b\u5ba2\u6237\u7aef\u200b\u8fdb\u884c\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u670d\u52a1\u7aef\u200b\u5f53\u7136\u200b\u6536\u4e0d\u5230\u200b\u6570\u636e\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u7b2c\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6d41\u7a0b\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u8dd1\u200b\u5b8c\u200b\uff0c\u200b\u5176\u4ed6\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u6d41\u7a0b\u200b\u600e\u4e48\u200b\u53ef\u80fd\u200b\u6267\u884c\u200b\u3002\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u6bcf\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u80fd\u591f\u200b\u72ec\u7acb\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u6b64\u65f6\u200b\u5c31\u200b\u9700\u8981\u200b\u7528\u5230\u200b\u7ebf\u7a0b\u200b\uff0c\u200b\u4e00\u65e6\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u8fde\u63a5\u200b\u540e\u200b\u5c31\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u8fdb\u884c\u200b\u7ba1\u7406\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u56e0\u4e3a\u200b\u4ee3\u7801\u200b\u903b\u8f91\u200b\u800c\u200b\u963b\u585e\u4f4f\u200b\u3002\u200b\u6dfb\u52a0\u200b\u7ebf\u7a0b\u200b\u540e\u200b\u7684\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>#include &lt;netinet/in.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\n#define BUFFERSIZE 1024\n\nvoid *client_thread(void *arg) {\n  int clnt_fd = *(int *)arg;\n  char buffer[BUFFERSIZE] = {0};\n  if (-1 != recv(clnt_fd, buffer, BUFFERSIZE, 0)) {\n    printf(\"RECV: %s\\n\", buffer);\n  } else {\n    perror(\"recv error\");\n    exit(EXIT_FAILURE);\n  }\n}\n\nint main() {\n  // 1. \u200b\u521b\u5efa\u200b socket \u2014\u2014&gt; \u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u521b\u5efa\u200b socket \u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b\u8fd9\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\n  int sock_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == sock_fd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u672c\u5730\u200b\u7aef\u53e3\u200b\n  struct sockaddr_in serv_addr;\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // INADDR_ANY \u200b\u8868\u793a\u200b 0.0.0.0\uff0c\u200b\u4ee3\u8868\u200b\u6240\u6709\u200b\u7f51\u6bb5\u200b\n  serv_addr.sin_port = htons(9090); // 0~1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b 1024 \u200b\u4ee5\u540e\u200b\u7684\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u51b2\u7a81\u200b\u4f1a\u200b\u7ed1\u5b9a\u200b\u5931\u8d25\u200b\n  if (-1 == bind(sock_fd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. listen \u200b\u6253\u5f00\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  if (-1 == listen(sock_fd, 10)) {\n    perror(\"listen error\");\n    exit(EXIT_FAILURE);\n  }\n\n  while (1) {\n    // 4. \u200b\u83b7\u53d6\u200b\u4e0e\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8054\u7cfb\u200b\n    struct sockaddr_in clnt_addr;\n    socklen_t len = sizeof(clnt_addr);\n    int clnt_fd = accept(sock_fd, (struct sockaddr *)&amp;clnt_addr, &amp;len);\n    if (-1 == clnt_fd) {\n      perror(\"accept error\");\n      exit(EXIT_FAILURE);\n    }\n\n    pthread_t clnt_thread;\n    if (0 != pthread_create(&amp;clnt_thread, NULL, client_thread, &amp;clnt_fd)) {\n      perror(\"pthread create error\");\n      exit(EXIT_FAILURE);\n    }\n  }\n\n  getchar();\n\n  return 0;\n}\n</code></pre> <p>\u200b\u867d\u7136\u200b\u73b0\u5728\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u72ec\u7acb\u200b\u53d1\u9001\u200b\u6d88\u606f\u200b\uff0c\u200b\u4f46\u662f\u200b\u5728\u200b\u8fd0\u884c\u200b\u4ee5\u540e\u200b\u53d1\u73b0\u200b\u6bcf\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u53ea\u80fd\u200b\u53d1\u9001\u200b\u4e00\u6b21\u200b\u6d88\u606f\u200b\uff0c\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u5728\u200b\u670d\u52a1\u7aef\u200b\u7684\u200b\u4ee3\u7801\u200b\u903b\u8f91\u200b\u4e2d\u200b\u53ea\u200b\u8fdb\u884c\u200b\u4e00\u6b21\u200b\u6d88\u606f\u200b\u63a5\u6536\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u53ef\u4ee5\u200b\u5728\u200b\u63a5\u6536\u200b\u6d88\u606f\u200b\u7684\u200b\u5730\u65b9\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\u5373\u53ef\u200b\u5b9e\u73b0\u200b\u591a\u6b21\u200b\u63a5\u6536\u200b\uff0c\u200b\u4fee\u6539\u200b\u7684\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>void *client_thread(void *arg) {\n  int clnt_fd = *(int *)arg;\n  while (1) {\n    char buffer[BUFFERSIZE] = {0};\n    if (-1 != recv(clnt_fd, buffer, BUFFERSIZE, 0)) {\n      printf(\"RECV: %s\\n\", buffer);\n    } else {\n      perror(\"recv error\");\n      exit(EXIT_FAILURE);\n    }\n  }\n}\n</code></pre> <p>\u200b\u81f3\u6b64\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u591a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u72ec\u7acb\u200b\u53d1\u9001\u6570\u636e\u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u7a0b\u5e8f\u200b\u5df2\u200b\u5b8c\u6210\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u670d\u52a1\u7aef\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6a21\u578b\u200b\u662f\u200b\u4e00\u200b\u8bf7\u6c42\u200b\u4e00\u7ebf\u200b\u7a0b\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u5b58\u5728\u200b\u4e00\u4e9b\u200b\u7f3a\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u5f53\u200b\u5e76\u53d1\u200b\u6570\u200b\u8f83\u5927\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u5927\u91cf\u200b\u7ebf\u7a0b\u200b\u6765\u200b\u5904\u7406\u200b\u8fde\u63a5\u200b\uff0c\u200b\u7cfb\u7edf\u8d44\u6e90\u200b\u5360\u7528\u200b\u8f83\u5927\u200b</li> <li>\u200b\u8fde\u63a5\u200b\u5efa\u7acb\u200b\u540e\u200b\uff0c\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u7ebf\u7a0b\u200b\u6682\u65f6\u200b\u6ca1\u6709\u200b\u6570\u636e\u200b\u53ef\u200b\u8bfb\u200b\uff0c\u200b\u5219\u200b\u8be5\u200b\u7ebf\u7a0b\u200b\u5219\u200b\u4f1a\u200b\u963b\u585e\u200b\u5728\u200b <code>recv</code> \u200b\u64cd\u4f5c\u200b\u4e0a\u200b\uff0c\u200b\u9020\u6210\u200b\u7ebf\u7a0b\u200b\u6d6a\u8d39\u200b</li> </ul> <p></p>"},{"location":"readed_books/c_primer_plus.html","title":"C Primer Plus","text":""},{"location":"readed_books/tcp_ip_network_programming.html","title":"TCP/IP \u200b\u7f51\u7edc\u200b\u7f16\u7a0b","text":"<p>\u200b\u9605\u8bfb\u200b\u9700\u8981\u200b\u5177\u5907\u200b\u7684\u200b\u57fa\u7840\u200b\uff1a\u200b\u719f\u6089\u200b C \u200b\u8bed\u8a00\u200b\u7f16\u7a0b\u200b\u3001\u200b\u719f\u6089\u200b C \u200b\u8bed\u8a00\u200b\u7a0b\u5e8f\u200b\u5728\u200b Linux \u200b\u6216\u200b Windows \u200b\u4e0b\u200b\u7684\u200b\u7f16\u5199\u200b\u548c\u200b\u7f16\u8bd1\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u7406\u89e3\u7f51\u7edc\u7f16\u7a0b\u548c\u5957\u63a5\u5b57","title":"\u7406\u89e3\u200b\u7f51\u7edc\u200b\u7f16\u7a0b\u200b\u548c\u200b\u5957\u200b\u63a5\u5b57","text":"<p>\u200b\u7f51\u7edc\u200b\u7f16\u7a0b\u200b\u5c31\u662f\u200b\u7f16\u5199\u7a0b\u5e8f\u200b\u8ba9\u200b\u4e24\u4e2a\u200b\u8ba1\u7b97\u673a\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u200b\u8fdb\u884c\u200b\u6570\u636e\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u200b\u9700\u8981\u200b\u5173\u6ce8\u200b\u8ba1\u7b97\u673a\u200b\u4e4b\u95f4\u200b\u662f\u200b\u7528\u200b\u4ec0\u4e48\u200b\u4f20\u8f93\u6570\u636e\u200b\u7684\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u9700\u8981\u200b\u5173\u6ce8\u200b\u4f20\u8f93\u6570\u636e\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff0c\u200b\u5173\u6ce8\u200b\u7684\u200b\u662f\u200b\u5982\u4f55\u200b\u5c06\u200b\u8ba9\u200b\u4e24\u4e2a\u200b\u8ba1\u7b97\u673a\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\u4ee5\u53ca\u200b\u600e\u4e48\u200b\u4f20\u8f93\u6570\u636e\u200b\u3002</p> <p>\u200b\u7f51\u7edc\u670d\u52a1\u200b\u4e00\u822c\u200b\u90fd\u200b\u4f1a\u200b\u6709\u200b\u670d\u52a1\u7aef\u200b\u548c\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u670d\u52a1\u7aef\u200b\u7528\u6765\u200b\u63a5\u6536\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\u3001\u200b\u63a5\u6536\u200b\u548c\u200b\u8f6c\u53d1\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u5ba2\u6237\u7aef\u200b\u5219\u200b\u662f\u200b\u8fdb\u884c\u200b\u591a\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6570\u636e\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u5982\u5fae\u200b\u4fe1\u4e2d\u200b\u597d\u53cb\u200b\u4e4b\u95f4\u200b\u7684\u200b\u804a\u5929\u200b\u7b49\u200b\u3002\u200b\u4e0b\u9762\u200b\u5148\u200b\u6765\u200b\u4e86\u89e3\u200b TCP \u200b\u670d\u52a1\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u670d\u52a1\u7aef","title":"\u670d\u52a1\u7aef","text":"<p>tcp \u200b\u670d\u52a1\u7aef\u200b\u7684\u200b\u5efa\u7acb\u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u4e00\u822c\u200b\u6709\u200b\u56db\u6b65\u200b\uff0c\u200b\u5728\u200b Windows \u200b\u4e2d\u8981\u200b\u591a\u200b\u51e0\u6b65\u200b\uff0c\u200b\u591a\u200b\u7684\u200b\u8fd9\u200b\u51e0\u6b65\u200b\u4ec5\u9650\u200b\u5bf9\u5e93\u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5148\u770b\u200b\u4e24\u4e2a\u200b\u90fd\u200b\u6709\u200b\u7684\u200b\u56db\u6b65\u200b\uff0c\u200b\u7c7b\u6bd4\u200b\u5bb6\u91cc\u200b\u5b89\u88c5\u200b\u56fa\u5b9a\u200b\u7535\u8bdd\u673a\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b \u2014\u2014&gt; \u200b\u76f8\u5f53\u4e8e\u200b\u8d2d\u4e70\u200b\u4e00\u4e2a\u200b\u7535\u8bdd\u673a\u200b\u786c\u4ef6\u200b\uff0c\u200b\u901a\u4fe1\u200b\u7684\u200b\u524d\u63d0\u6761\u4ef6\u200b</li> </ol> LinuxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint socket(int domain, int type, int protocol);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b INVALID_SOCKET\nSOCKET socket(int af, int type, int protocol);\n</code></pre> <ol> <li>\u200b\u7ed9\u200b\u5957\u200b\u63a5\u5b57\u200b\u7ed1\u5b9a\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b \u2014\u2014&gt; \u200b\u9009\u53d6\u200b\u7535\u8bdd\u53f7\u7801\u200b\uff0c\u200b\u786e\u4fdd\u200b\u522b\u4eba\u200b\u77e5\u9053\u200b\u4f60\u200b\u7684\u200b\u7535\u8bdd\u53f7\u7801\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u53f7\u7801\u200b\u6253\u200b\u8fc7\u6765\u200b</li> </ol> LinuxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nint bind(SOCKET s, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre> <ol> <li>\u200b\u5c06\u200b\u5957\u200b\u63a5\u5b57\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u63a5\u6536\u200b\u8fde\u63a5\u200b\u7684\u200b\u72b6\u6001\u200b \u2014\u2014&gt; \u200b\u63a5\u4e0a\u200b\u7535\u4fe1\u5c40\u200b\u7684\u200b\u7535\u8bdd\u7ebf\u200b\uff0c\u200b\u7535\u8bdd\u200b\u5c31\u200b\u5904\u4e8e\u200b\u4e00\u4e2a\u200b\u53ef\u200b\u63a5\u542c\u200b\u7684\u200b\u72b6\u6001\u200b</li> </ol> LinuxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint listen(int sockfd, int backlog);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nint listen(SOCKET s, int backlog);\n</code></pre> <ol> <li>\u200b\u63a5\u6536\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b \u2014\u2014&gt; \u200b\u62ff\u200b\u8d77\u200b\u7535\u8bdd\u200b\u8fdb\u884c\u200b\u63a5\u542c\u200b</li> </ol> LinuxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u975e\u8d1f\u200b\u6574\u6570\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6574\u6570\u200b\u662f\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u975e\u8d1f\u200b\u6574\u6570\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6574\u6570\u200b\u662f\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nSOCKET accept(SOCKET s, struct sockaddr *addr, socklen_t *addrlen);\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b Windows \u200b\u7f16\u5199\u200b\u7f51\u7edc\u200b\u76f8\u5173\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b <code>winsock2.h</code> \u200b\u5e93\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u7f16\u8bd1\u200b\u7684\u200b\u65f6\u5019\u200b\u9700\u8981\u200b\u94fe\u63a5\u200b <code>ws2_32</code>\u3002\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u8fd8\u200b\u9700\u200b\u521d\u59cb\u5316\u200b\u6b64\u5e93\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u7ed3\u675f\u200b\u7684\u200b\u65f6\u5019\u200b\u8fd8\u200b\u9700\u8981\u200b\u6ce8\u9500\u200b\u6b64\u5e93\u200b\uff0c\u200b\u51fd\u6570\u200b\u5982\u4e0b\u200b</p> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b\u975e\u200b 0 \u200b\u7684\u200b\u9519\u8bef\u4ee3\u7801\u200b\u503c\u200b\nint WSAStartup(WORD wVersionRequested, LPWSDATA lpWSAData);\n\n// WORD \u200b\u8868\u793a\u200b winsock \u200b\u7684\u200b\u7248\u672c\u200b\u7c7b\u578b\u200b\uff0c\u200b\u76f4\u63a5\u200b\u4f20\u9012\u200b\u5219\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u5341\u516d\u8fdb\u5236\u200b\u8868\u793a\u200b\uff0c\u200b\u9ad8\u200b 8 \u200b\u4f4d\u4e3a\u200b\u526f\u200b\u7248\u672c\u53f7\u200b\uff0c\u200b\u4f4e\u200b\u516b\u4f4d\u200b\u4e3a\u4e3b\u200b\u7248\u672c\u53f7\u200b\n// \u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b MAKEWORD \u200b\u51fd\u6570\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u4e3b\u200b\u7248\u672c\u53f7\u200b\u548c\u200b\u526f\u200b\u7248\u672c\u53f7\u200b\uff0c\u200b\u5982\u200b MAKEWORD(2, 1);\n// \u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b WSADATA \u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u4f20\u5165\u200b\u5373\u53ef\u200b\n\nint WSACleanup(void);\n</code></pre> <p>\u200b\u521d\u6b21\u200b\u4e4b\u5916\u200b\uff0c\u200b\u5173\u95ed\u200b\u5957\u200b\u63a5\u5b57\u200b\u4e5f\u200b\u662f\u200b\u4f7f\u7528\u200b\u72ec\u6709\u200b\u7684\u200b\u51fd\u6570\u200b</p> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nint closesocket(SOCKET s);\n</code></pre> <p>\u200b\u7b80\u5355\u200b tcp \u200b\u670d\u52a1\u7aef\u200b\u7a0b\u5e8f\u200b\u5982\u4e0b\u200b\uff1a</p> LinuxWindows <pre><code>#include &lt;arpa/inet.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\n#define BUFFERSIZE 1024\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int sock_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == sock_fd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(sock_fd, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr))) {\n    perror(\"bind error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 3. \u200b\u5efa\u7acb\u200b\u63a5\u6536\u200b\u8fde\u63a5\u200b\u901a\u9053\u200b\n  if (-1 == listen(sock_fd, 5)) {\n    perror(\"listen error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 4. \u200b\u63a5\u6536\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\n  struct sockaddr_in clnt_addr;\n  socklen_t len = sizeof(clnt_addr);\n  int clnt_fd = accept(sock_fd, (struct sockaddr *)&amp;clnt_addr, &amp;len);\n  if (-1 == clnt_fd) {\n    perror(\"accept error\");\n    exit(EXIT_FAILURE);\n  }\n\n  char messages[] = \"hello world!\";\n  write(clnt_fd, messages, sizeof(messages));\n\n  close(clnt_fd);\n  close(sock_fd);\n\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;WinSock2.h&gt;\n\nvoid error_handling(const char *msg);\n\nint main(int argc, char *argv[]) {\n  if (2 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // \u200b\u521d\u59cb\u5316\u200b winsock \u200b\u5e93\u200b\n  WSADATA wsa_data;\n  WSAStartup(MAKEWORD(2, 2), &amp;wsa_data);\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  SOCKET serv_sock = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == serv_sock)\n    error_handling(\"socket error\");\n\n  // 2. \u200b\u7ed1\u5b9a\u200b\u672c\u5730\u200b\u4fe1\u606f\u200b\n  struct sockaddr_in serv_addr;\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(atoi(argv[1]));\n  if (-1 == bind(serv_sock, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr)))\n    error_handling(\"bind error\");\n\n  // 3. \u200b\u6253\u5f00\u200b\u53ef\u200b\u8fde\u63a5\u200b\u72b6\u6001\u200b\n  if (-1 == listen(serv_sock, 5))\n    error_handling(\"listen error\");\n\n  // 4. \u200b\u63a5\u6536\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u8fde\u63a5\u200b\n  struct sockaddr_in clnt_addr;\n  int addrlen = sizeof(clnt_addr);\n  SOCKET clnt_sock = accept(serv_sock, (struct sockaddr *)&amp;clnt_addr, &amp;addrlen);\n  if (-1 == clnt_sock)\n    error_handling(\"accept error\");\n\n  char message[] = \"hello world!\";\n  int size = send(clnt_sock, message, sizeof(message), 0);\n  if (-1 == size)\n    error_handling(\"send error\");\n\n  closesocket(clnt_sock);\n  closesocket(serv_sock);\n  // \u200b\u6ce8\u9500\u200b winsock \u200b\u5e93\u200b\n  WSACleanup();\n  return 0;\n}\n\nvoid error_handling(const char *msg) {\n  fputs(msg, stderr);\n  fputc('\\n', stderr);\n  exit(EXIT_FAILURE);\n}\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u5ba2\u6237\u7aef","title":"\u5ba2\u6237\u7aef","text":"<p>tcp \u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u642d\u5efa\u200b\u53ea\u200b\u9700\u8981\u200b\u4e24\u4e2a\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b \u2014\u2014&gt; \u200b\u8d2d\u4e70\u200b\u4e00\u4e2a\u200b\u7535\u8bdd\u673a\u200b</li> <li>\u200b\u8bf7\u6c42\u200b\u8fde\u63a5\u200b \u2014\u2014&gt; \u200b\u62e8\u6253\u200b\u7535\u8bdd\u200b</li> </ol> LiunxWindows <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nint connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre> <pre><code>#include &lt;winsock2.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 0\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b SOCKET_ERROR\nint connect(SOCKET s, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre> <p>\u200b\u7b80\u5355\u200b tcp \u200b\u5ba2\u6237\u7aef\u7a0b\u5e8f\u200b\u5982\u4e0b\u200b\uff1a</p> LinuxWindows <pre><code>#include &lt;arpa/inet.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\n#define BUFFERSIZE 1024\n\nint main(int argc, char *argv[]) {\n  if (3 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;ip&gt; &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  int clnt_fd = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == clnt_fd) {\n    perror(\"socket error\");\n    exit(EXIT_FAILURE);\n  }\n\n  // 2. \u200b\u5411\u200b\u670d\u52a1\u5668\u53d1\u9001\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\n  struct sockaddr_in clnt_addr;\n  clnt_addr.sin_family = AF_INET;\n  clnt_addr.sin_addr.s_addr = htonl(argv[1]);\n  clnt_addr.sin_port = htons(atoi(argv[2]));\n  if (-1 == connect(clnt_fd, (struct sockaddr *)&amp;clnt_addr, sizeof(clnt_addr))) {\n    perror(\"connect error\");\n    exit(EXIT_FAILURE);\n  }\n\n  char buffer[BUFFERSIZE] = {0};\n  ssize_t len = read(clnt_fd, buffer, BUFFERSIZE);\n  if (-1 == len) {\n    perror(\"read error\");\n    exit(EXIT_FAILURE);\n  }\n\n  printf(\"read from server: %s\\n\", buffer);\n  close(clnt_fd);\n\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;WinSock2.h&gt;\n\n#define BUFFERSIZE 1024\n\nvoid error_handling(const char *msg);\n\nint main(int argc, char *argv[]) {\n  if (3 != argc) {\n    fprintf(stderr, \"Usage: %s &lt;ip&gt; &lt;port&gt;\\n\", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  // \u200b\u521d\u59cb\u5316\u200b winsock \u200b\u5e93\u200b\n  WSADATA wsa_data;\n  WSAStartup(MAKEWORD(2, 2), &amp;wsa_data);\n\n  // 1. \u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\n  SOCKET clnt_sock = socket(AF_INET, SOCK_STREAM, 0);\n  if (-1 == clnt_sock)\n    error_handling(\"socket error\");\n\n  // 2. \u200b\u5411\u200b\u670d\u52a1\u5668\u53d1\u9001\u200b\u8fde\u63a5\u200b\u8bf7\u6c42\u200b\n  struct sockaddr_in clnt_addr;\n  clnt_addr.sin_family = AF_INET;\n  clnt_addr.sin_addr.s_addr = inet_addr(argv[1]);\n  clnt_addr.sin_port = htons(atoi(argv[2]));\n  if (-1 == connect(clnt_sock, (struct sockaddr *)&amp;clnt_addr, sizeof(clnt_addr)))\n    error_handling(\"connect error\");\n\n  char buffer[BUFFERSIZE] = {0};\n  int len = recv(clnt_sock, buffer, BUFFERSIZE, 0);\n  if (-1 == len)\n    error_handling(\"recv error\");\n  printf(\"buffer from server: %s\\n\", buffer);\n\n  closesocket(clnt_sock);\n  // \u200b\u6ce8\u9500\u200b winsock \u200b\u5e93\u200b\n  WSACleanup();\n  return 0;\n}\n\nvoid error_handling(const char *msg) {\n  fputs(msg, stderr);\n  fputc('\\n', stderr);\n  exit(EXIT_FAILURE);\n}\n</code></pre> <p>\u200b\u7f16\u8bd1\u200b\u8fd0\u884c\u200b\u4e0a\u8ff0\u200b\u4e24\u4e2a\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5148\u200b\u542f\u52a8\u200b\u670d\u52a1\u7aef\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u518d\u542f\u52a8\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u3002\u200b\u6b64\u65f6\u200b\u5ba2\u6237\u7aef\u200b\u4f1a\u200b\u6536\u5230\u200b\u670d\u52a1\u7aef\u200b\u53d1\u6765\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e24\u4e2a\u200b\u7a0b\u5e8f\u200b\u90fd\u200b\u4f1a\u200b\u7acb\u5373\u200b\u9000\u51fa\u200b\u3002</p> <p>\u200b\u4e0a\u8ff0\u200b\u4e24\u4e2a\u200b\u7a0b\u5e8f\u200b\u4f7f\u7528\u200b <code>read</code> \u200b\u548c\u200b <code>write</code> \u200b\u51fd\u6570\u200b\uff0c\u200b\u662f\u56e0\u4e3a\u200b\u5728\u200b Linux \u200b\u4e2d\u200b\uff0c\u200b\u4e00\u5207\u90fd\u662f\u200b\u6587\u4ef6\u200b\uff0csocket \u200b\u4e5f\u200b\u662f\u200b\u6587\u4ef6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u6587\u4ef6\u200b\u76f8\u5173\u200b\u7684\u200b\u8bfb\u5199\u64cd\u4f5c\u200b\u3002\u200b\u800c\u200b\u5728\u200b Windows \u200b\u4e2d\u200b\uff0c\u200b\u7f51\u7edc\u200b\u5957\u200b\u63a5\u5b57\u200b\u548c\u200b\u6587\u4ef6\u200b\u662f\u200b\u6709\u200b\u533a\u522b\u200b\u7684\u200b\uff0c\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u7f51\u7edc\u200b\u8bfb\u5199\u200b\u4e13\u7528\u200b\u7684\u200b\u51fd\u6570\u200b <code>recv</code> \u200b\u548c\u200b <code>send</code> \u200b\u6765\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b\u5728\u200b Linux \u200b\u4e2d\u200b\u4e5f\u200b\u9002\u7528\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u5957\u63a5\u5b57\u7c7b\u578b\u4e0e\u534f\u8bae\u8bbe\u7f6e","title":"\u5957\u200b\u63a5\u5b57\u200b\u7c7b\u578b\u200b\u4e0e\u200b\u534f\u8bae\u200b\u8bbe\u7f6e","text":"<p>\u200b\u4ec0\u4e48\u200b\u662f\u200b\u534f\u8bae\u200b(Protocol)\uff0c\u200b\u7b80\u5355\u200b\u7684\u200b\u8bf4\u200b\u5c31\u662f\u200b\u4e24\u4e2a\u200b\u901a\u4fe1\u200b\u5bf9\u8c61\u200b\u4e4b\u95f4\u200b\u7684\u200b\u4e00\u79cd\u200b\u901a\u4fe1\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5c31\u200b\u6bd4\u5982\u200b\u6211\u4eec\u200b\u4eba\u200b\u4e0e\u200b\u4eba\u200b\u4e4b\u95f4\u200b\u4ea4\u6d41\u200b\u7528\u200b\u4e2d\u6587\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u662f\u200b\u4e00\u79cd\u200b\u534f\u8bae\u200b(\u200b\u5927\u5bb6\u200b\u7ea6\u5b9a\u200b\u597d\u200b\u7684\u200b\u89c4\u5219\u200b)\u3002</p> <p>\u200b\u5728\u200b\u524d\u9762\u200b\u63d0\u5230\u200b\u8fc7\u200b <code>socket</code> \u200b\u51fd\u6570\u200b\u662f\u200b\u7528\u6765\u200b\u521b\u5efa\u200b\u5957\u200b\u63a5\u5b57\u200b\u7684\u200b\uff0c\u200b\u4f46\u662f\u200b\u6ca1\u6709\u200b\u63d0\u5230\u200b\u53c2\u6570\u200b\u600e\u4e48\u200b\u7528\u200b\uff0c\u200b\u6b64\u5904\u200b\u505a\u200b\u8be6\u7ec6\u200b\u7684\u200b\u5206\u6790\u200b\u3002</p> <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n\n// domain\uff1a\u200b\u5957\u200b\u63a5\u5b57\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u534f\u8bae\u200b\u65cf\u200b(protocol family)\u200b\u4fe1\u606f\u200b\n// type\uff1a\u200b\u5957\u200b\u63a5\u5b57\u200b\u6570\u636e\u4f20\u8f93\u200b\u7c7b\u578b\u4fe1\u606f\u200b\n// protocol\uff1a\u200b\u8ba1\u7b97\u673a\u200b\u95f4\u901a\u4fe1\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u534f\u8bae\u200b\u4fe1\u606f\u200b\nint socket(int domain, int type, int protocol);\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u534f\u8bae\u65cf","title":"\u534f\u8bae\u200b\u65cf","text":"<p>\u200b\u5957\u200b\u63a5\u5b57\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u534f\u8bae\u200b\u6709\u200b\u5f88\u591a\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u534f\u8bae\u200b\u5728\u200b\u4e00\u8d77\u200b\u7edf\u79f0\u200b\u4e3a\u200b\u534f\u8bae\u200b\u65cf\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u5728\u200b <code>sys/socket.h</code> \u200b\u5934\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u534f\u8bae\u200b\u65cf\u200b\u4e2d\u200b\u7684\u200b\u534f\u8bae\u200b\u7b80\u5355\u200b\u5206\u4e3a\u200b\u4ee5\u4e0b\u200b\u51e0\u7c7b\u200b(\u200b\u8fd9\u91cc\u200b\u53ea\u200b\u4ecb\u7ecd\u200b\u5e38\u7528\u200b\u7684\u200b)\uff1a</p> <ul> <li><code>AF_INET</code>\uff1aIPv4 \u200b\u4e92\u8054\u7f51\u534f\u8bae\u200b\u65cf\u200b</li> <li><code>AF_INET6</code>\uff1aIPv6 \u200b\u4e92\u8054\u7f51\u534f\u8bae\u200b\u65cf\u200b</li> <li><code>AF_LOCAL/AF_UNIX</code>\uff1a\u200b\u672c\u5730\u200b\u901a\u4fe1\u200b\u7684\u200b UNIX \u200b\u534f\u8bae\u200b\u65cf\u200b</li> <li><code>AF_PACKET</code>\uff1a\u200b\u5e95\u5c42\u200b\u5957\u200b\u63a5\u5b57\u200b\u7684\u200b\u534f\u8bae\u200b\u65cf\u200b</li> <li><code>AF_IPX</code>\uff1aIPX Novell \u200b\u534f\u8bae\u200b\u65cf\u200b</li> </ul> <p>\u200b\u5957\u200b\u63a5\u5b57\u200b\u7684\u200b\u534f\u8bae\u200b\u7c7b\u578b\u200b\u662f\u200b\u7531\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u51b3\u5b9a\u200b\uff0c\u200b\u9009\u53d6\u200b\u4e0a\u9762\u200b\u7684\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u5957\u63a5\u5b57\u7c7b\u578b","title":"\u5957\u200b\u63a5\u5b57\u200b\u7c7b\u578b","text":"<p>\u200b\u5957\u200b\u63a5\u5b57\u200b\u7c7b\u578b\u200b\u662f\u200b\u7531\u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b\u51b3\u5b9a\u200b\uff0c\u200b\u6765\u200b\u51b3\u5b9a\u200b\u5957\u200b\u63a5\u5b57\u200b\u7684\u200b\u6570\u200b\u4f20\u8f93\u65b9\u5f0f\u200b\uff0c\u200b\u6bcf\u200b\u4e00\u79cd\u200b\u534f\u8bae\u200b\u90fd\u200b\u4f1a\u200b\u7531\u200b\u591a\u79cd\u200b\u6570\u636e\u200b\u4f20\u8f93\u65b9\u5f0f\u200b\uff0c\u200b\u4e0b\u9762\u200b\u4ee5\u200b <code>AF_INET</code> \u200b\u6765\u200b\u4ecb\u7ecd\u200b\u4e24\u4e2a\u200b\u5177\u6709\u200b\u4ee3\u8868\u6027\u200b\u7684\u200b\u6570\u636e\u200b\u4f20\u8f93\u65b9\u5f0f\u200b\uff1a</p> <ul> <li><code>SOCK_STREAM</code>(\u200b\u9762\u5411\u200b\u8fde\u63a5\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b)\uff1a\u200b\u9762\u5411\u200b\u8fde\u63a5\u200b\uff0c\u200b\u987e\u540d\u601d\u4e49\u200b\u5c31\u662f\u200b\u5fc5\u987b\u200b\u8981\u200b\u6709\u200b\u8fde\u63a5\u200b\u624d\u80fd\u200b\u8fdb\u884c\u200b\u6570\u636e\u4f20\u8f93\u200b\uff0c\u200b\u7531\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u7279\u70b9\u200b\uff0c\u200b\u6709\u70b9\u200b\u7c7b\u4f3c\u200b\u4f20\u9001\u5e26\u200b\u4f20\u9001\u200b\u7269\u54c1\u200b<ul> <li>\u200b\u4f20\u8f93\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u6570\u636e\u200b\u4e0d\u4f1a\u200b\u4e22\u5931\u200b</li> <li>\u200b\u6309\u5e8f\u200b\u4f20\u8f93\u6570\u636e\u200b</li> <li>\u200b\u4f20\u8f93\u200b\u7684\u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b\u6570\u636e\u200b\u8fb9\u754c\u200b</li> <li>\u200b\u5957\u200b\u63a5\u5b57\u200b\u8fde\u63a5\u200b\u5fc5\u987b\u200b\u4e00\u4e00\u5bf9\u5e94\u200b</li> </ul> </li> <li><code>SOCK_DRGAM</code>(\u200b\u9762\u5411\u200b\u6d88\u606f\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b)\uff1a\u200b\u987e\u540d\u601d\u4e49\u200b\u5c31\u662f\u200b\u53ea\u7ba1\u200b\u53d1\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u5ba2\u6237\u7aef\u200b\u662f\u5426\u200b\u6709\u200b\u63a5\u6536\u200b\uff0c\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u7279\u70b9\u200b<ul> <li>\u200b\u5f3a\u8c03\u200b\u5feb\u901f\u200b\u4f20\u8f93\u200b\u800c\u200b\u975e\u200b\u4f20\u8f93\u200b\u987a\u5e8f\u200b</li> <li>\u200b\u4f20\u8f93\u200b\u7684\u200b\u6570\u636e\u200b\u53ef\u80fd\u200b\u4e22\u5931\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u635f\u6bc1\u200b</li> <li>\u200b\u4f20\u8f93\u200b\u7684\u200b\u6570\u636e\u200b\u6ca1\u6709\u200b\u8fb9\u754c\u200b</li> <li>\u200b\u9650\u5236\u200b\u6bcf\u6b21\u200b\u4f20\u8f93\u200b\u7684\u200b\u6570\u636e\u200b\u5927\u5c0f\u200b</li> </ul> </li> </ul>"},{"location":"readed_books/tcp_ip_network_programming.html#\u6700\u7ec8\u534f\u8bae\u7684\u786e\u5b9a","title":"\u6700\u7ec8\u200b\u534f\u8bae\u200b\u7684\u200b\u786e\u5b9a","text":"<p>\u200b\u5957\u200b\u63a5\u5b57\u200b\u7684\u200b\u6700\u7ec8\u200b\u534f\u8bae\u200b\u4ee5\u53ca\u200b\u6570\u636e\u200b\u4f20\u8f93\u65b9\u5f0f\u200b\u662f\u200b\u7531\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u786e\u5b9a\u200b\u7684\u200b\uff0c\u200b\u4f46\u662f\u200b\u6211\u4eec\u200b\u4e00\u822c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b 0\uff0c\u200b\u9664\u975e\u200b\u51fa\u73b0\u200b\u6570\u636e\u200b\u4f20\u8f93\u65b9\u5f0f\u200b\u76f8\u540c\u200b\u4f46\u200b\u534f\u8bae\u200b\u4e0d\u540c\u200b\u7684\u200b\u573a\u666f\u200b\u624d\u200b\u4f1a\u200b\u5bf9\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u505a\u200b\u6539\u53d8\u200b\u3002\u200b\u5982\u200b\u57fa\u4e8e\u200b TCP \u200b\u5957\u200b\u63a5\u5b57\u200b\u548c\u200b UDP \u200b\u5957\u200b\u63a5\u5b57\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5199\u6210\u200b\u5982\u4e0b\u200b\u7684\u200b\u6837\u5b50\u200b</p> <pre><code>int tcp_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\nint udp_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n</code></pre> <p>tcp \u200b\u6570\u636e\u200b\u4f20\u8f93\u65b9\u5f0f\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b</p> <p></p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u5730\u5740\u65cf\u4e0e\u6570\u636e\u5e8f\u5217","title":"\u5730\u5740\u200b\u65cf\u200b\u4e0e\u200b\u6570\u636e\u200b\u5e8f\u5217","text":"<p>IP(Internet Protocol) \u200b\u662f\u200b\u4e3a\u200b\u6536\u53d1\u200b\u7f51\u7edc\u200b\u6570\u636e\u200b\u800c\u200b\u5206\u914d\u200b\u7ed9\u200b\u8ba1\u7b97\u673a\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b IP \u200b\u627e\u5230\u200b\u6307\u5b9a\u200b\u7684\u200b\u8ba1\u7b97\u673a\u200b\uff0c\u200b\u800c\u200b\u7aef\u53e3\u200b\u662f\u200b\u533a\u5206\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u521b\u5efa\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\u800c\u200b\u5206\u914d\u200b\u7ed9\u200b\u5957\u200b\u63a5\u5b57\u200b\u7684\u200b\u5e8f\u53f7\u200b\u3002</p> <p>IP \u200b\u5730\u5740\u200b\u5206\u4e3a\u200b\u4e24\u7c7b\u200b\uff0c\u200b\u8fd9\u200b\u4e24\u7c7b\u200b\u5730\u5740\u200b\u7684\u200b\u5dee\u522b\u200b\u4e3b\u8981\u200b\u5728\u4e8e\u200b\u8868\u793a\u200b IP \u200b\u5730\u5740\u200b\u6240\u7528\u200b\u7684\u200b\u5b57\u8282\u6570\u200b\uff1a</p> <ul> <li>IPv4(Internet Protocol version 4)\uff1a4 \u200b\u5b57\u8282\u200b\u5730\u5740\u200b\u65cf\u200b</li> <li>IPv6(Internet Protocol version 6)\uff1a16 \u200b\u5b57\u8282\u200b\u5730\u5740\u200b\u65cf\u200b\uff0c\u200b\u89e3\u51b3\u200b 2010 \u200b\u5e74\u200b\u524d\u540e\u200b IP \u200b\u5730\u5740\u200b\u8017\u5c3d\u200b\u7684\u200b\u95ee\u9898\u200b</li> </ul> <p>\u200b\u73b0\u5728\u200b\u4e3b\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u8fd8\u662f\u200b IPv4\uff0c\u200b\u5176\u200b 4 \u200b\u5b57\u8282\u200b\u5185\u5bb9\u200b\u4f1a\u200b\u4fdd\u5b58\u200b\u4e24\u4e2a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5206\u522b\u200b\u662f\u200b\u7f51\u7edc\u5730\u5740\u200b\u548c\u200b\u4e3b\u673a\u200b\u5730\u5740\u200b\uff0c\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u56db\u79cd\u200b\u65b9\u5f0f\u200b\u8868\u793a\u200b</p> <p></p> <p>\u200b\u56e0\u6b64\u200b\u5728\u200b\u5c40\u57df\u7f51\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u4e3b\u673a\u200b\u7684\u200b\u7f51\u7edc\u5730\u5740\u200b\u662f\u200b\u76f8\u540c\u200b\u7684\u200b\uff0c\u200b\u800c\u200b\u4e3b\u673a\u200b\u5730\u5740\u200b\u662f\u200b\u4e0d\u540c\u200b\u7684\u200b\uff0c\u200b\u6b64\u65f6\u200b\u5916\u7f51\u200b\u6709\u200b\u4e3b\u673a\u200b\u9700\u8981\u200b\u53d1\u9001\u6570\u636e\u200b\u5230\u200b\u6b64\u200b\u5c40\u57df\u7f51\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e2a\u200b\u4e3b\u673a\u200b\u4e2d\u200b\uff0c\u200b\u9996\u5148\u200b\u89e3\u6790\u200b IP \u200b\u5730\u5740\u200b\u4e2d\u200b\u7684\u200b\u7f51\u7edc\u5730\u5740\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u7531\u200b\u8be5\u200b\u7f51\u8def\u200b\u5730\u5740\u200b\u7684\u200b\u8def\u7531\u5668\u200b\u6216\u200b\u4ea4\u6362\u673a\u200b\u6839\u636e\u200b\u6570\u636e\u200b\u4e2d\u200b\u7684\u200b\u4e3b\u673a\u200b\u5730\u5740\u200b\u60f3\u200b\u76ee\u6807\u200b\u4e3b\u673a\u200b\u4f20\u9012\u6570\u636e\u200b\u3002</p> <p>\u200b\u8fd9\u200b 4 \u200b\u5b57\u8282\u200b\u7684\u200b IP \u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u662f\u200b\u5982\u4f55\u200b\u533a\u5206\u200b\u51fa\u6765\u200b\u54ea\u4e9b\u200b\u5b57\u8282\u200b\u662f\u200b\u7f51\u7edc\u5730\u5740\u200b\uff0c\u200b\u54ea\u4e9b\u200b\u5b57\u8282\u200b\u662f\u200b\u4e3b\u673a\u200b\u5730\u5740\u200b\uff0c\u200b\u8fd9\u662f\u200b\u6839\u636e\u200b IP \u200b\u5730\u5740\u200b\u7684\u200b\u8fb9\u754c\u200b\u6765\u200b\u533a\u5206\u200b\u7684\u200b\uff0c\u200b\u5982\u200b\uff1a</p> <ul> <li>A \u200b\u7c7b\u200b\u5730\u5740\u200b\u7684\u200b\u9996\u200b\u5b57\u8282\u200b\u8303\u56f4\u200b\uff1a0~127</li> <li>B \u200b\u7c7b\u200b\u5730\u5740\u200b\u7684\u200b\u9996\u200b\u5b57\u8282\u200b\u8303\u56f4\u200b\uff1a128~191</li> <li>C \u200b\u7c7b\u200b\u5730\u5740\u200b\u7684\u200b\u9996\u200b\u5b57\u8282\u200b\u8303\u56f4\u200b\uff1a192~223</li> </ul> <p>\u200b\u6709\u200b\u4e86\u200b IP \u200b\u5c31\u200b\u80fd\u200b\u533a\u5206\u200b\u8ba1\u7b97\u673a\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd8\u200b\u65e0\u6cd5\u200b\u5b9a\u4f4d\u200b\u5230\u200b\u4e3b\u673a\u200b\u4e3b\u673a\u200b\u7ec8\u7aef\u200b\u5177\u4f53\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u6b64\u65f6\u200b\u9700\u8981\u200b\u7aef\u53e3\u53f7\u200b\u6765\u200b\u533a\u5206\u200b\u3002\u200b\u7aef\u53e3\u53f7\u200b\u662f\u200b\u4e0e\u200b\u5957\u200b\u63a5\u5b57\u200b\u4e00\u4e00\u5bf9\u5e94\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u65e0\u6cd5\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u7aef\u53e3\u53f7\u200b\u5206\u914d\u200b\u7ed9\u200b\u4e0d\u540c\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u524d\u9762\u200b\u4e0d\u80fd\u200b\u4ee5\u200b\u76f8\u540c\u200b\u7684\u200b\u7aef\u53e3\u53f7\u200b\u542f\u52a8\u200b\u4e24\u6b21\u200b\u670d\u52a1\u7aef\u200b\u3002\u200b\u7aef\u53e3\u53f7\u200b\u662f\u200b\u7531\u200b 16 \u200b\u4f4d\u200b\u6784\u6210\u200b\uff0c\u200b\u53ef\u200b\u5206\u914d\u200b\u7684\u200b\u7aef\u53e3\u200b\u8303\u56f4\u200b\u5c31\u200b\u4e3a\u200b 0 ~ 65535\u3002\u200b\u4f46\u200b 0 ~ 1023 \u200b\u662f\u200b\u7cfb\u7edf\u200b\u5206\u914d\u200b\u7ed9\u200b\u7279\u5b9a\u200b\u7a0b\u5e8f\u200b\u7684\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u8981\u200b\u5206\u914d\u200b\u6b64\u200b\u8303\u56f4\u200b\u4e4b\u5916\u200b\u7684\u200b\u7aef\u53e3\u53f7\u200b\u3002\u200b\u53e6\u5916\u200b\uff0c\u200b\u867d\u7136\u200b TCP \u200b\u5957\u200b\u63a5\u5b57\u200b\u4e0d\u80fd\u200b\u91cd\u590d\u200b\u7aef\u53e3\u53f7\u200b\uff0c\u200b\u4f46\u662f\u200b UDP \u200b\u548c\u200b TCP \u200b\u4e0d\u4f1a\u200b\u5171\u7528\u200b\u5957\u200b\u63a5\u5b57\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4e24\u8005\u200b\u662f\u200b\u53ef\u4ee5\u200b\u91cd\u590d\u200b\u7684\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u5730\u5740\u4fe1\u606f\u7684\u8868\u793a","title":"\u5730\u5740\u200b\u4fe1\u606f\u200b\u7684\u200b\u8868\u793a","text":"<p>IP \u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u662f\u200b\u901a\u8fc7\u200b\u7ed3\u6784\u200b\u4f53\u6765\u200b\u8868\u793a\u200b\u7684\u200b\uff0c\u200b\u5728\u200b\u7ed3\u6784\u200b\u4f53\u4e2d\u200b\u9700\u8981\u200b\u8bf4\u660e\u200b\u5730\u5740\u200b\u65cf\u200b\u7c7b\u578b\u200b\u3001IP \u200b\u5730\u5740\u200b\u4ee5\u53ca\u200b\u7aef\u53e3\u53f7\u200b\u7b49\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5176\u200b\u7ed3\u6784\u200b\u4e3a\u200b</p> <pre><code>struct sockaddr_in {\n  sa_family_t sin_family; // \u200b\u5730\u5740\u200b\u65cf\u200b\n  uint16_t sin_port;      // 16 \u200b\u4f4d\u200b TCP/UDP \u200b\u7aef\u53e3\u53f7\u200b\n  struct in_addr sin_addr;// 32 \u200b\u4f4d\u200b IP \u200b\u5730\u5740\u200b\n  char sin_zero[8];       // \u200b\u4e0d\u200b\u4f7f\u7528\u200b\n};\n\n//\n// IPv4 Internet address\n// This is an 'on-wire' format structure.\n//\ntypedef struct in_addr {\n  union {\n    struct { UCHAR s_b1,s_b2,s_b3,s_b4; } S_un_b;\n    struct { USHORT s_w1,s_w2; } S_un_w;\n    ULONG S_addr;\n  } S_un;\n#define s_addr  S_un.S_addr /* can be used for most tcp &amp; ip code */\n#define s_host  S_un.S_un_b.s_b2    // host on imp\n#define s_net   S_un.S_un_b.s_b1    // network\n#define s_imp   S_un.S_un_w.s_w2    // imp\n#define s_impno S_un.S_un_b.s_b4    // imp #\n#define s_lh    S_un.S_un_b.s_b3    // logical host\n} IN_ADDR, *PIN_ADDR, FAR *LPIN_ADDR;\n</code></pre> <p>\u200b\u4e3a\u4ec0\u4e48\u200b <code>bind</code> \u200b\u51fd\u6570\u200b\u9700\u8981\u200b\u7684\u200b\u662f\u200b <code>sockaddr</code> \u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u5730\u5740\u200b\uff0c\u200b\u800c\u200b\u6211\u4eec\u200b\u5374\u200b\u4f20\u9012\u200b <code>sockaddr_in</code> \u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b <code>sockaddr</code> \u200b\u5c06\u200b IP \u200b\u5730\u5740\u200b\u548c\u200b\u7aef\u53e3\u200b\u7b49\u200b\u4fe1\u606f\u200b\u4fdd\u5b58\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u8f83\u4e3a\u200b\u9ebb\u70e6\u200b\uff0c\u200b\u4ece\u200b\u4e0b\u9762\u200b\u7684\u200b\u7ed3\u6784\u200b\u5b9a\u4e49\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200b</p> <pre><code>struct sockaddr {\n  sa_family_t sin_family;\n  char sa_data[14];\n};\n</code></pre>"},{"location":"readed_books/tcp_ip_network_programming.html#\u7f51\u7edc\u5b57\u8282\u5e8f\u4e0e\u5730\u5740\u53d8\u6362","title":"\u7f51\u7edc\u200b\u5b57\u8282\u200b\u5e8f\u200b\u4e0e\u200b\u5730\u5740\u53d8\u6362","text":"<p>\u200b\u4e0d\u540c\u200b\u7684\u200b CPU \u200b\u4e2d\u200b\uff0c\u200b\u6570\u636e\u200b\u7684\u200b\u4fdd\u5b58\u200b\u65b9\u5f0f\u200b\u662f\u200b\u4e0d\u540c\u200b\u7684\u200b\uff0c\u200b\u5982\u200b 4 \u200b\u5b57\u8282\u200b\u7684\u200b\u6574\u578b\u200b\u503c\u200b 1 \u200b\u53ef\u4ee5\u200b\u7528\u200b \u200b\u4e8c\u8fdb\u5236\u200b\u8868\u793a\u200b\u5982\u4e0b\u200b</p> <p>00000000 00000000 00000000 00000001</p> <p>\u200b\u6709\u4e9b\u200b CPU \u200b\u5219\u200b\u4f1a\u200b\u5012\u5e8f\u200b\u4fdd\u5b58\u200b\uff0c\u200b\u4fdd\u5b58\u200b\u5f62\u5f0f\u200b\u5982\u4e0b\u200b</p> <p>00000001 00000000 00000000 00000000</p> <p>\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u5c31\u662f\u200b\u6240\u8c13\u200b\u7684\u200b\u5927\u7aef\u200b\u5e8f\u200b\u548c\u200b\u5c0f\u7aef\u5e8f\u200b\uff1a</p> <ul> <li>\u200b\u5927\u7aef\u200b\u5e8f\u200b(Big Endian)\uff1a\u200b\u9ad8\u4f4d\u200b\u5b57\u8282\u200b\u5e8f\u200b\u5b58\u653e\u200b\u5230\u200b\u4f4e\u4f4d\u200b\u5730\u5740\u200b</li> <li>\u200b\u5c0f\u7aef\u5e8f\u200b(Little Endian)\uff1a\u200b\u9ad8\u4f4d\u200b\u5b57\u8282\u200b\u5e8f\u200b\u5b58\u653e\u200b\u5230\u200b\u9ad8\u4f4d\u200b\u5730\u5740\u200b</li> </ul> <p>\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u5982\u679c\u200b\u4e24\u4e2a\u200b\u8ba1\u7b97\u673a\u200b\u91c7\u7528\u200b\u7684\u200b\u662f\u200b\u4e0d\u540c\u200b\u7684\u200b\u5b57\u8282\u200b\u5e8f\u200b\uff0c\u200b\u5219\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u200b\u4f20\u8f93\u6570\u636e\u200b\uff0c\u200b\u89e3\u6790\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u662f\u200b\u9519\u8bef\u200b\u7684\u200b\uff0c\u200b\u5982\u200b 0x1234 \u200b\u5c0f\u7aef\u5e8f\u200b\u7684\u200b\u673a\u5668\u200b\u53d1\u9001\u5230\u200b\u5927\u7aef\u200b\u5e8f\u200b\u89e3\u6790\u200b\u540e\u200b\u5c31\u662f\u200b 0x3412\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5728\u200b\u4f7f\u7528\u200b\u7f51\u7edc\u200b\u4f20\u8f93\u6570\u636e\u200b\u65f6\u200b\u7ea6\u5b9a\u200b\u7edf\u4e00\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u7ea6\u5b9a\u200b\u79f0\u4e3a\u200b\u7f51\u7edc\u200b\u5b57\u8282\u200b\u5e8f\u200b \u2014\u2014 \u200b\u5927\u7aef\u200b\u5e8f\u200b\u3002</p> <p>\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c\u200b\u5728\u200b\u8fdb\u884c\u200b\u7f51\u7edc\u200b\u4f20\u8f93\u200b\u65f6\u200b\uff0c\u200b\u5c0f\u7aef\u5e8f\u200b\u7684\u200b\u673a\u5668\u200b\u5fc5\u987b\u200b\u8fdb\u884c\u200b\u8f6c\u6362\u200b\uff0c\u200b\u5c06\u200b\u6570\u636e\u200b\u8f6c\u6362\u6210\u200b\u5927\u7aef\u200b\u5e8f\u200b\uff0c\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u8f6c\u6362\u200b\u51fd\u6570\u200b\uff1a</p> <ul> <li><code>unsigned short htons(unsigned short);</code></li> <li><code>unsigned short ntons(unsigned short);</code></li> <li><code>unsigned long htonl(unsigned long);</code></li> <li><code>unsigned long ntonl(unsigned long);</code></li> </ul> <p>\u200b\u5176\u4e2d\u200b h \u200b\u4ee3\u8868\u200b\u4e3b\u673a\u200b\u5b57\u8282\u200b\u5e8f\u200b\uff0cn \u200b\u4ee3\u8868\u200b\u7f51\u7edc\u200b\u7f51\u7edc\u200b\u5b57\u8282\u200b\u5e8f\u200b\uff0c\u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u5728\u200b\u586b\u5145\u200b <code>sockaddr_in</code> \u200b\u7ed3\u6784\u200b\u4f53\u65f6\u200b\u8981\u200b\u6362\u6210\u200b\u7f51\u7edc\u200b\u5b57\u8282\u200b\u5e8f\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u4f60\u200b\u7684\u200b\u4e3b\u673a\u200b\u662f\u200b\u4ec0\u4e48\u200b\u5b57\u8282\u200b\u5e8f\u200b\uff0c\u200b\u5728\u200b\u7f16\u5199\u200b\u4ee3\u7801\u200b\u65f6\u200b\uff0c\u200b\u90fd\u200b\u5efa\u8bae\u200b\u7ecf\u8fc7\u200b\u4e3b\u673a\u200b\u5b57\u8282\u200b\u5e8f\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u7f51\u7edc\u200b\u5b57\u8282\u200b\u5e8f\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u3002</p>"},{"location":"readed_books/tcp_ip_network_programming.html#\u7f51\u7edc\u5730\u5740\u7684\u521d\u59cb\u5316\u4e0e\u5206\u914d","title":"\u7f51\u7edc\u5730\u5740\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u4e0e\u200b\u5206\u914d","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b\u4e4b\u524d\u200b\u7684\u200b\u4f7f\u7528\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u77e5\u9053\u200b\uff0c<code>sockaddr_in</code> \u200b\u4fdd\u5b58\u200b\u7684\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u662f\u200b 32 \u200b\u4f4d\u200b\u6574\u578b\u200b\u6570\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5c06\u200b\u5b57\u7b26\u4e32\u200b\u65b9\u5f0f\u200b\u8868\u793a\u200b\u7684\u200b IP \u200b\u8f6c\u6362\u6210\u200b 32 \u200b\u4f4d\u200b\u6574\u6570\u578b\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u8fd9\u65f6\u200b\u9700\u8981\u200b\u7528\u5230\u200b\u4ee5\u4e0b\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b</p> <pre><code>#include &lt;arpa/inet.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 32 \u200b\u4f4d\u200b\u5927\u7aef\u200b\u5e8f\u200b\u6574\u6570\u578b\u200b\u503c\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b INADDR_NONE\uff0c\u200b\u6b64\u200b\u51fd\u6570\u200b\u4f1a\u200b\u7d2b\u7ea2\u200b\u8fdb\u884c\u200b\u7f51\u7edc\u200b\u5b57\u8282\u200b\u5e8f\u200b\u8f6c\u6362\u200b\nint_addr_t inet_addr(const char *string);\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b 1\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b 0\nint inet_aton(const char *string, struct in_addr *addr);\n</code></pre> <p>\u200b\u9664\u6b64\u4e4b\u5916\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u51fd\u6570\u200b\u5c06\u200b\u6574\u6570\u578b\u200b\u7684\u200b\u5730\u5740\u200b\u8f6c\u6362\u6210\u200b\u5b57\u7b26\u4e32\u200b\u578b\u200b\u7684\u200b\u5730\u5740\u200b</p> <pre><code>#include &lt;arpa/inet.h&gt;\n\n// \u200b\u6210\u529f\u200b\u8fd4\u56de\u200b\u8f6c\u6362\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u5730\u5740\u200b\uff0c\u200b\u5931\u8d25\u200b\u8fd4\u56de\u200b -1\nchar *inet_ntoa(struct in_addr adr);\n</code></pre> <p>\u200b\u4e86\u89e3\u200b\u4e86\u200b\u8fd9\u4e48\u200b\u591a\u200b\uff0c\u200b\u90a3\u4e48\u200b\u7f51\u7edc\u5730\u5740\u200b\u4fe1\u606f\u200b\u662f\u200b\u5982\u4f55\u200b\u4e0e\u200b\u5957\u200b\u63a5\u5b57\u200b\u7ed1\u5b9a\u200b\u7684\u200b\u5462\u200b \u2014\u2014 \u200b\u5c31\u662f\u200b\u901a\u8fc7\u200b <code>bind</code> \u200b\u51fd\u6570\u200b\uff0c\u200b\u5982\u679c\u200b\u6b64\u200b\u51fd\u6570\u8c03\u7528\u200b\u6210\u529f\u200b\uff0c\u200b\u5c31\u662f\u200b\u5c06\u200b\u7f51\u7edc\u5730\u5740\u200b\u4fe1\u606f\u200b\u5206\u914d\u200b\u5230\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u6307\u5b9a\u200b\u5957\u200b\u63a5\u5b57\u200b\u4e2d\u200b\u3002\u200b\u5728\u200b Windows \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u51fd\u6570\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4e0e\u200b Linxu \u200b\u57fa\u672c\u76f8\u540c\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u4e0d\u518d\u200b\u8d58\u8ff0\u200b\u3002</p>"}]}